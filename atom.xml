<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sheh伟伟的博客</title>
  <subtitle>Attitude is a little thing that makes a big difference</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://davidsheh.github.io/"/>
  <updated>2019-01-29T11:10:13.000Z</updated>
  <id>http://davidsheh.github.io/</id>
  
  <author>
    <name>Sheh伟伟</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WSL 使用记录</title>
    <link href="http://davidsheh.github.io/2017/09/29/wsl-usage/"/>
    <id>http://davidsheh.github.io/2017/09/29/wsl-usage/</id>
    <published>2017-09-29T12:11:02.000Z</published>
    <updated>2019-01-29T11:10:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>WSL 是 Windows Subsystem for Linux 的缩写。它是 Win10 系统下面的一个 Linux 子系统。</p>
<h2 id="安装和卸载-WSL环境"><a href="#安装和卸载-WSL环境" class="headerlink" title="安装和卸载 WSL环境"></a>安装和卸载 WSL环境</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在 Win10 上的 Microsoft Store 中搜索 Linux，就可以看到 WSL 所支持的 Linux 版本，找到想要安装的版本直接安装就可以了。目前，WSL支持 Ubuntu，Kali Linux，GNU，OpenSUSE 等，后续可能会有更多Linux发行版支持WSL。本文主要记录 Ubuntu 的使用过程。</p>
<h3 id="安装报错"><a href="#安装报错" class="headerlink" title="安装报错"></a>安装报错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Installing, this may take a few minutes...</div><div class="line">WslRegisterDistribution failed with error: 0x8007019e</div><div class="line">The Windows Subsystem for Linux optional component is not enabled. Please enable it and try again.</div><div class="line">See https://aka.ms/wslinstall for details.</div><div class="line">Press any key to continue...</div></pre></td></tr></table></figure>
<p>报错原因是没有启用 WSL，解决办法在输出信息里，直接打开<a href="https://aka.ms/wslinstall" target="_blank" rel="noopener">链接</a>，就可以看到解决办法。<strong>注意：</strong> 要用管理员方式打开 PowerShell。</p>
<h3 id="卸载和重装"><a href="#卸载和重装" class="headerlink" title="卸载和重装"></a>卸载和重装</h3><p>随便去试吧，如果你搞坏了你的 WSL 环境，它很容易重新安装。在进行之前，请确保做好了任何重要内容的备份。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">C:/&gt; lxrun.exe /uninstall /full</div><div class="line">C:/&gt; lxrun.exe /install</div></pre></td></tr></table></figure></p>
<h2 id="设置相关"><a href="#设置相关" class="headerlink" title="设置相关"></a>设置相关</h2><h3 id="访问-Windows-磁盘"><a href="#访问-Windows-磁盘" class="headerlink" title="访问 Windows 磁盘"></a>访问 Windows 磁盘</h3><p>WSL 将 Windows 系统的磁盘符都挂在到 <code>/mnt</code> 目录下了，所以如果想在 Ubuntu 中访问 Windows 系统的 C 盘，可以使用命令 <code>cd /mnt/c</code>。</p>
<h3 id="修改默认-Shell"><a href="#修改默认-Shell" class="headerlink" title="修改默认 Shell"></a>修改默认 Shell</h3><p>可以使用 <code>echo $SHELL</code> 命令查看当前正在使用的 Shell，使用 <code>which zsh</code> 可以查看安装的 <code>zsh</code> 路径，使用 <code>chsh -s /bin/zsh</code> 修改默认 Shell。</p>
<h3 id="使用-Fish-Shell"><a href="#使用-Fish-Shell" class="headerlink" title="使用 Fish Shell"></a>使用 Fish Shell</h3><ol>
<li>安装 <code>fish</code>：<code>apt-get install fish</code></li>
<li>设置默认 <code>shell</code> 为 <code>fish</code><ul>
<li>使用 <code>vim ~/.bashrc</code> 命令打开文件</li>
<li>在文件末尾添加一行 <code>fish</code> 命令</li>
</ul>
</li>
</ol>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ol>
<li><code>cd /</code> 或 <code>cd ~</code> 回到根目录或回到 Home 目录</li>
<li><code>cd -</code> 回到前一个工作路径</li>
<li>在 Bash 中，可以按下 <code>Ctrl+W</code> 删除你键入的最后一个单词，<code>Ctrl+U</code> 可以删除行内光标所在位置之前的内容，<code>Alt+左/右</code> 可以以单词为单位移动光标，<code>Ctrl+A</code> 可以将光标移至行首，<code>Ctrl+E</code> 可以将光标移至行尾，<code>Ctrl+K</code> 可以删除光标至行尾的所有内容，<code>Ctrl+L</code> 可以清屏。</li>
<li><code>Ctrl+D</code> 一个特殊的二进制值，表示 EOF，作用相当于在终端中输入 <code>exit</code> 后回车；</li>
<li>Linux 中的三个终端控制键：<ol>
<li><code>Ctrl+C</code> 比较暴力，就是发送 Terminal 到当前的程序，比如你正在运行一个查找功能，文件正在查找中，Ctrl+C就会强制结束当前的这个进程。也可以取消命令执行，比如你已经输入了一长串命令了，这时突然不想执行这个命令了，就可以按下这个组合键取消。</li>
<li><code>Ctrl+Z</code> 是把当前的程序挂起，暂停执行这个程序，比如你正在 mysql 终端中，需要出来搞点其他的文件操作，又不想退出 mysql 终端（因为下次还得输入用户名密码进入，挺麻烦），于是可以 <code>Ctrl+Z</code> 将 mysql 挂起，然后进行其他操作，然后输入fg回车后就可以回来，当然可以挂起好多进程到后台，然后 <code>fg</code> 加编号就能把挂起的进程返回到前台。当然，配合 <code>bg</code> 和 <code>fg</code> 命令进行前后台切换会非常方便。</li>
<li><code>Ctrl+D</code> 是发送一个 exit 信号，没有那么强烈，类似<code>Ctrl+C</code> 的操作，比如你从管理员 root 退回到你的普通用户就可以这么用。</li>
</ol>
</li>
<li><code>Ctrl+R</code> 逆向搜索历史命令</li>
<li><code>Ctrl+P</code> 访问上一条命令</li>
<li><code>Ctrl+N</code> 访问下一条命令</li>
<li><code>!!</code> 执行上一条命令，<code>!foo</code> 执行以 foo 开头的命令</li>
<li><code>scp [localpath] [username]@[ip]</code></li>
</ol>
<h2 id="在命令行中高效移动"><a href="#在命令行中高效移动" class="headerlink" title="在命令行中高效移动"></a>在命令行中高效移动</h2><p><img src="https://clementc.github.io/figures/moving_cli.png" alt="Moving efficiently in the command line"></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://github.com/iWangJiaxiang/WSL-Guideline" target="_blank" rel="noopener">https://github.com/iWangJiaxiang/WSL-Guideline</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;WSL 是 Windows Subsystem for Linux 的缩写。它是 Win10 系统下面的一个 Linux 子系统。&lt;/p&gt;

    
    </summary>
    
      <category term="技术笔记" scheme="http://davidsheh.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Shell" scheme="http://davidsheh.github.io/tags/Shell/"/>
    
      <category term="wsl" scheme="http://davidsheh.github.io/tags/wsl/"/>
    
      <category term="Ubuntu" scheme="http://davidsheh.github.io/tags/Ubuntu/"/>
    
      <category term="Linux" scheme="http://davidsheh.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Windows 系统的包管理器</title>
    <link href="http://davidsheh.github.io/2017/09/09/windows-chocolatey-scoop/"/>
    <id>http://davidsheh.github.io/2017/09/09/windows-chocolatey-scoop/</id>
    <published>2017-09-09T13:02:36.000Z</published>
    <updated>2019-01-29T11:10:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>自从在 Mac 下使用了 <a href="http://davidsheh.github.io/2017/08/26/mac-homebrew/">Homebrew</a> + <a href="https://davidsheh.github.io/2017/08/27/mac-iterm2/">iTerm 2</a> + <a href="https://davidsheh.github.io/2017/08/28/mac-fishshell/">Fish shell</a> 后，瞬间感觉世界清静了不少。然后就在想 Windows 下面有没有类似的软件呢？毕竟在工作中使用 Windows 还是比较多的，然后在网上还真搜到了。对应于 Mac 下的 <a href="[http://davidsheh.github.io/2017/08/26/mac-homebrew/](http://davidsheh.github.io/2017/08/26/mac-homebrew/">Homebrew</a>) + <a href="https://davidsheh.github.io/2017/08/27/mac-iterm2/">iTerm 2</a> + <a href="https://davidsheh.github.io/2017/08/28/mac-fishshell/">Fish shell</a> ， Windows 下是 Chocolatey( + Scoop) + ConEmu + PowerShell。</p>
<h2 id="Chocolatey"><a href="#Chocolatey" class="headerlink" title="Chocolatey"></a>Chocolatey</h2><p>官网号称 Chocolatey 是在 Windows 上管理软件的明智方式，轻松管理 Windows 软件的各个方面（安装，配置，升级和卸载）。其他介绍请看官网：<a href="https://chocolatey.org/。" target="_blank" rel="noopener">https://chocolatey.org/。</a></p>
<h3 id="Chocolatey-安装"><a href="#Chocolatey-安装" class="headerlink" title="Chocolatey 安装"></a>Chocolatey 安装</h3><p>Chocolatey 的安装要求用户系统至少是 Windows 7 以上或者 Server 版本 2003 以上，PowerShell 至少是 v2 以上。还需要 <code>.NET Framework 4+</code>，不过在安装 Chocolatey 前会自动检查，如果没有就会自动安装。<br>Chocolatey 可以通过两种方式安装：使用 cmd.exe 来安装和使用 PowerShell.exe 来安装。安装的具体事项可以看官网的 <a href="https://chocolatey.org/install" target="_blank" rel="noopener">Install</a>。</p>
<h4 id="使用-cmd-exe-方式安装"><a href="#使用-cmd-exe-方式安装" class="headerlink" title="使用 cmd.exe 方式安装"></a>使用 cmd.exe 方式安装</h4><p>建议优先使用此方式安装，因为 cmd.exe 安装过程没有其他操作步骤。打开 CMD 命令行，然后输入如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@&quot;%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe&quot; -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command &quot;iex ((New-Object System.Net.WebClient).DownloadString(&apos;https://chocolatey.org/install.ps1&apos;))&quot; &amp;&amp; SET &quot;PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin&quot;</div></pre></td></tr></table></figure></p>
<p><strong>注意：</strong>如果安装失败，安装过程报错，报错信息如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Installation of Chocolatey to default folder requires Administrative permissions. Please run from elevated prompt.</div></pre></td></tr></table></figure></p>
<p>具体报错信息如下图：<br><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/chocolatey_error.jpg" alt=""><br>上面这个错误产生的原因是因为没有以管理员身份启动 cmd.exe。如何以管理员身份启动 cmd.exe 请自行搜索，这里就不再啰嗦了。</p>
<h4 id="使用-PowerShell-exe-方式安装"><a href="#使用-PowerShell-exe-方式安装" class="headerlink" title="使用 PowerShell.exe 方式安装"></a>使用 PowerShell.exe 方式安装</h4><p>如果 cmd.exe 方式安装不成功再尝试这种方式， PowerShell.exe 安装过程会有安全性提示，要输入命令来确认。打开 PowerShell 命令行，然后输入如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Set-ExecutionPolicy AllSigned; iex ((New-Object System.Net.WebClient).DownloadString(&apos;https://chocolatey.org/install.ps1&apos;))</div></pre></td></tr></table></figure></p>
<p>安装过程可能会有安全性提示，按照提示来操作就行了。</p>
<blockquote>
<p>使用<code>Win + R</code> 快捷键，接着输入<code>cmd</code>然后回车打开 CMD，输入 <code>powershell</code> 然后回车打开 PowerShell。如果安装报错，也有可能跟第一种安装方式一样是因为没有使用管理员身份运行 PowerShell 的原因。默认以管理员身份启动 PowerShell 的设置可以参考<a href="http://www.pstips.net/set-powershell-icon-launch-to-default-to-run-as-administrator.html" target="_blank" rel="noopener">让PowerShell控制台默认以管理员启动</a> 。</p>
</blockquote>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">choco -h                       # 查看帮助</div><div class="line">choco &lt;command&gt; -h             #查看相应命令的帮助</div><div class="line">choco install &lt;package name&gt;   #安装软件包</div><div class="line">choco search &lt;keyword&gt;         #搜索软件包，会列出跟关键字相关的所有软件包</div><div class="line">choco upgrade &lt;package name&gt;   #升级软件包</div><div class="line">choco uninstall &lt;package name&gt; #卸载软件包</div><div class="line">choco list --local-only        #查看本地安装的软件包</div></pre></td></tr></table></figure>
<p>更多命令请参考 <a href="https://chocolatey.org/docs/commands-reference#how-to-pass-options--switches" target="_blank" rel="noopener">Command Reference</a> </p>
<p><strong>注意：</strong><code>choco list</code> 命令查看的是所有软件包，包括本地已安装和远程存在的软件包，所以这个命令执行很耗时。一般我们查看的都是本地已安装的软件包，所以要加上 <code>--local-only</code> 参数，如果要查看远程的软件包，直接使用 <code>choco search</code> 搜索指定软件包。</p>
<h3 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">choco install googlechrome #安装 Chrome 浏览器</div><div class="line">choco install autohotkey.portable #安装 AutoHotKey</div><div class="line">choco install ccleaner #安装清理工具</div><div class="line">choco install visualstudiocode #安装 VS Code</div><div class="line">choco install conemu #安装ConEmu</div><div class="line">choco install sourcetree #安装SourceTree</div><div class="line">choco install winrar #安装压缩软件</div><div class="line">choco install android-sdk #安装 Android SDK</div><div class="line">choco install git #安装Git</div><div class="line">choco install jdk8 #安装jdk8</div><div class="line">choco install nodejs #安装Node.js</div><div class="line">choco install virtualbox #安装虚拟机</div><div class="line">choco install vim #安装 Vim</div><div class="line">choco install docker #安装Docker</div><div class="line">choco install wget #安装Wget</div><div class="line">choco install dropbox #安装 Dropbox</div><div class="line">choco install tortoisesvn #安装 TortoiseSVN</div></pre></td></tr></table></figure>
<p>你所能想到的 Windows 上常用的软件差不多都能找到，想要找什么软件，直接使用 <code>choco search &lt;keyword&gt;</code> 用关键字搜索，如果不知道自己想要啥软件或者记不起来要装啥软件，可以去官网的 <a href="https://chocolatey.org/packages" target="_blank" rel="noopener">Packages</a> 页下找找，几千个软件包，慢慢找去吧。</p>
<h2 id="Scoop"><a href="#Scoop" class="headerlink" title="Scoop"></a>Scoop</h2><p>Scoop 是 Windows 上的命令行安装程序，主要针对命令行下的开发者工具，和程序猿更配哦。个人的感觉是，Scoop 更像 Mac 上的 <a href="http://davidsheh.github.io/2017/08/26/mac-homebrew/">Homebrew</a>， Chocolatey 更像 <a href="http://davidsheh.github.io/2017/08/26/mac-homebrew/">Homebrew-Cask</a>。关于 Scoop 的更多介绍请看官网：<a href="http://scoop.sh/" target="_blank" rel="noopener">http://scoop.sh/</a> ，同时，Scoop 是开源的项目，仓库地址<a href="https://github.com/lukesampson/scoop" target="_blank" rel="noopener">点这里</a>。</p>
<h3 id="Scoop-安装"><a href="#Scoop-安装" class="headerlink" title="Scoop 安装"></a>Scoop 安装</h3><p>Scoop 的安装要求 Windows 上安装的 PowerShell 版本至少的 PowerShell 3，而且必须为你的用户帐户启用 PowerShell 。Windows 10 或 Windows Server 2012 应该默认安装的是 PowerShell 3，但 Windows 7 和Windows Server 2008 可能是比较老的版本。</p>
<h4 id="升级-PowerShell"><a href="#升级-PowerShell" class="headerlink" title="升级 PowerShell"></a>升级 PowerShell</h4><p>如果是 Windows 7 系统可能需要升级一下 PowerShell，有两种方式可以升级：一是直接下载 <a href="https://www.microsoft.com/en-us/download/details.aspx?id=34595" target="_blank" rel="noopener">PowerShell 3 的安装包</a>，二是通过 Chocolatey 升级。推荐使用第二种方式，下面重点介绍一下第二种方式的升级方法。<br>首先安装 Chocolatey ， 安装方法见上文。使用 <code>choco search powershell</code> 命令只搜索到 PowerShell 4 和 PowerShell 5。虽然在官网 <a href="https://chocolatey.org/packages" target="_blank" rel="noopener">Packages</a> 上搜索到了 <a href="https://chocolatey.org/packages/PowerShell/3.0.20121027" target="_blank" rel="noopener">PowerShell 3</a>，但是好像没通过审核，而且我强行安装失败，最后我直接安装的 PowerShell 5，在 PowerShell 命令行下输入如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">choco install powershell  #默认安装的最新版5.1</div></pre></td></tr></table></figure></p>
<p>安装过程需要同意，提示 <code>Do you want to run the script?([Y]es/[N]o/[P]rint):</code> 时，输入<code>y</code>就行了。</p>
<blockquote>
<p><strong>提示：</strong>可以使用 <code>Get-Host</code> 命令查看 PowerShell 版本，安装完后需要重启电脑，新版 PowerShell 才能生效。</p>
</blockquote>
<h4 id="开始安装-Scoop"><a href="#开始安装-Scoop" class="headerlink" title="开始安装 Scoop"></a>开始安装 Scoop</h4><p>安装 Scoop 前需要确保你已经允许 PowerShell 执行本地脚本，执行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set-executionpolicy remotesigned -scope currentuser</div></pre></td></tr></table></figure></p>
<p>执行这个命令时可能会提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Do you want to change the execution policy?</div><div class="line">[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is &quot;N&quot;):</div></pre></td></tr></table></figure></p>
<p>输入 <code>y</code> 或者 <code>a</code> 就可以了。接下来开始安装 Scoop，执行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iex (new-object net.webclient).downloadstring(&apos;https://get.scoop.sh&apos;)</div></pre></td></tr></table></figure></p>
<h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">scoop help #查看帮助</div><div class="line">scoop install #安装 APP</div><div class="line">scoop uninstall #卸载 APP</div><div class="line">scoop list #列出已安装的 APP</div><div class="line">scoop search #搜索 APP</div><div class="line">scoop update #更新 APP 和 Scoop 自身</div></pre></td></tr></table></figure>
<p>其实只需要记住 <code>scoop help</code> 这一个命令就行了，其他命令忘记了直接通过这个命令查看就行了。</p>
<h3 id="常用软件-1"><a href="#常用软件-1" class="headerlink" title="常用软件"></a>常用软件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scoop install 7zip #安装压缩软件</div><div class="line">scoop install git  #安装Git</div><div class="line">scoop install openssh #安装OpenSSH</div><div class="line">scoop install concfg #安装控制台配置文件导入导出工具</div><div class="line">concfg import solarized small #导入 Solarized 主题</div></pre></td></tr></table></figure>
<p>上面的四条命令可以合并成一个命令 <code>scoop install 7zip git openssh concfg</code>。支持的更多软件看这里：<a href="https://github.com/lukesampson/scoop/tree/master/bucket" target="_blank" rel="noopener">https://github.com/lukesampson/scoop/tree/master/bucket</a> 。</p>
<h3 id="Scoop-的其他配置"><a href="#Scoop-的其他配置" class="headerlink" title="Scoop 的其他配置"></a>Scoop 的其他配置</h3><p><img src="https://github.com/lukesampson/scoop/raw/gh-pages/images/docs/shell-theme.png" alt=""><br>上图是 Scoop 官方给出的效果图，使用的是  <a href="http://ethanschoonover.com/solarized" target="_blank" rel="noopener">Solarized</a> 主题。主题和字体的配置需要用到 <a href="https://github.com/lukesampson/concfg" target="_blank" rel="noopener">concfg</a> 插件，<code>concfg</code> 插件是导入和导出 Windows 控制台配置（如字体和颜色）的一个工具。使用 <code>scoop install concfg</code> 命令来安装。<br>个人感觉 Scoop 最牛逼的地方在于 <a href="https://github.com/lukesampson/scoop/wiki/Buckets" target="_blank" rel="noopener">Buckets</a>，甚至是可以制作自己的 Buckets，可配置性更高了，由于篇幅的原因，这个以后有机会了再写吧。</p>
<h3 id="Scoop-VS-Chocolatey"><a href="#Scoop-VS-Chocolatey" class="headerlink" title="Scoop VS Chocolatey"></a>Scoop VS Chocolatey</h3><p>Scoop 和 Chocolatey 不同的地方在于下面几点：</p>
<ol>
<li>独立安装，和已有软件不冲突</li>
<li>没有权限对话框，因为程序安装到用户目录</li>
<li>不会污染路径</li>
<li>不使用 NuGet，无需担心依赖</li>
<li>不是软件包管理器，它仅读取一个关于如何安装程序的 JSON</li>
<li>不安装特定版本，仅仅支持最新版本</li>
<li><strong>专注于开发者的工具</strong></li>
</ol>
<p>更多请参考 <a href="https://github.com/lukesampson/scoop/wiki/Chocolatey-Comparison" target="_blank" rel="noopener">Chocolatey Comparison</a>。国外有人把 Windows 下主流的包管理工具做了一个对比，分别列出了各自的优缺点，还有很多人投票，网站链接： <a href="https://www.slant.co/improve/topics/1843/~windows-package-managers" target="_blank" rel="noopener">What are the best Windows package managers?</a>。</p>
<h2 id="一键装机"><a href="#一键装机" class="headerlink" title="一键装机"></a>一键装机</h2><p>当你在一台电脑上用 Chocolatey 和 Scoop（非程序员可以不装 Scoop） 配置过一次工作环境后，你只需要记住你所使用的软件包的名称，然后将所有的安装命令的清单云同步，那么当你换电脑了就可以很轻松的同步工作环境的配置，是不是非常酷，甚至是换工作时在新同事面前耍（装）帅（逼）。我的命令清单如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#使用 Chocolatey 安装</div><div class="line">choco install googlechrome #安装 Chrome 浏览器</div><div class="line">choco install unity #安装最新版 Unity3D 游戏引擎</div><div class="line">choco install visualstudiocode #安装 VS Code</div><div class="line"></div><div class="line">choco install jdk8 #安装jdk8</div><div class="line">choco install android-sdk #安装 Android SDK</div><div class="line"></div><div class="line">#使用 Scoop 安装</div><div class="line">scoop install concfg git #安装 concfg、git 等</div><div class="line">scoop install cmder-full #安装 cmder</div><div class="line">scoop install pshazz #安装自定义提示和具有 Git&amp;SSH 特性的插件</div></pre></td></tr></table></figure></p>
<p>清单会持续更新，先就列这么多吧，以后再更新其他命令，欢迎关注 <a href="https://davidsheh.github.io/">Sheh 伟伟的个人博客</a>。</p>
<hr>
<p><strong>同系列文章</strong></p>
<p><a href="http://davidsheh.github.io/2017/09/09/windows-chocolatey-scoop/">Windows 系统的包管理器</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从在 Mac 下使用了 &lt;a href=&quot;http://davidsheh.github.io/2017/08/26/mac-homebrew/&quot;&gt;Homebrew&lt;/a&gt; + &lt;a href=&quot;https://davidsheh.github.io/2017/08/27
    
    </summary>
    
      <category term="开发工具" scheme="http://davidsheh.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Windows" scheme="http://davidsheh.github.io/tags/Windows/"/>
    
      <category term="Chocolatey" scheme="http://davidsheh.github.io/tags/Chocolatey/"/>
    
      <category term="Scoop" scheme="http://davidsheh.github.io/tags/Scoop/"/>
    
  </entry>
  
  <entry>
    <title>用Hexo搭建个人博客</title>
    <link href="http://davidsheh.github.io/2017/09/03/hexo-blog/"/>
    <id>http://davidsheh.github.io/2017/09/03/hexo-blog/</id>
    <published>2017-09-03T12:08:21.000Z</published>
    <updated>2019-01-29T11:10:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><h3 id="1-安装Homebrew"><a href="#1-安装Homebrew" class="headerlink" title="1. 安装Homebrew"></a>1. 安装Homebrew</h3><p>Mac建议使用 Homebrew 安装必要的插件，Windows用户可以跳过这一步。关于 Homebrew 的介绍请看我的这篇博文 <a href="https://davidsheh.github.io/2017/08/26/mac-homebrew/">Mac开发必备工具（一）—— Homebrew</a>。</p>
<h3 id="2-安装Git和Node-js"><a href="#2-安装Git和Node-js" class="headerlink" title="2. 安装Git和Node.js"></a>2. 安装Git和Node.js</h3><p>Node.js 可以通过 Homebrew 安装，安装命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install node</div></pre></td></tr></table></figure></p>
<h3 id="3-安装-Hexo-博客框架"><a href="#3-安装-Hexo-博客框架" class="headerlink" title="3. 安装 Hexo 博客框架"></a>3. 安装 Hexo 博客框架</h3><p>Hexo 框架可以使用下面的 npm 命令来安装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure></p>
<h2 id="使用Hexo建站"><a href="#使用Hexo建站" class="headerlink" title="使用Hexo建站"></a>使用Hexo建站</h2><h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo init &lt;folder&gt;</div><div class="line">cd &lt;folder&gt;</div><div class="line">npm install</div></pre></td></tr></table></figure></p>
<blockquote>
<p>建站步骤可参考<a href="https://hexo.io/zh-cn/docs/setup.html" target="_blank" rel="noopener">Hexo官方文档</a></p>
</blockquote>
<p>接着执行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate</div><div class="line">hexo server</div></pre></td></tr></table></figure></p>
<p>命令执行完毕后，在浏览器输入<code>localhost:4000</code>就可以预览本地博客效果。</p>
<h3 id="将Hexo部署到GitHub"><a href="#将Hexo部署到GitHub" class="headerlink" title="将Hexo部署到GitHub"></a>将Hexo部署到GitHub</h3><p>在 GitHub 上新建一个仓库，然后修改 Hexo 的配置文件<code>_config.yml</code>中的 Deployment 配置项，修改内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: https://github.com/xxx/xxx.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>注意：</strong> 上面的的 <code>repository</code> 项要换成自己新建完成的 GitHub 仓库地址，也就是把上面的xxx换成你 GitHub 的用户名。</p>
</blockquote>
<p>配置完后，接着执行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo generate</div><div class="line">hexo deploy</div></pre></td></tr></table></figure></p>
<p>这样就将博客部署到GitHub上了。可以在浏览器中输入<code>https://xxx.github.io</code>查看博客效果。我的博客效果可以<a href="https://davidsheh.github.io">点这里查看</a>。</p>
<blockquote>
<p>如果部署报错<code>ERROR Deployer not found: git</code> 或者 <code>ERROR Deployer not found: github</code>，就先执行<code>npm install hexo-deployer-git --save</code>安装部署插件后再运行<code>hexo deploy</code>命令</p>
</blockquote>
<h2 id="开始写作"><a href="#开始写作" class="headerlink" title="开始写作"></a>开始写作</h2><p>你可以执行下列命令来创建一篇新文章:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new &lt;title&gt;</div></pre></td></tr></table></figure></p>
<p>命令执行完后，会在 Hexo 项目的<code>\source\_posts</code>目录下生成一个对应名称的<code>.md</code>文件。用编辑器打开就可以开始写文章了，注意文章得使用 Markdown 编写。文章写完后执行上面的清理、生成和部署命令将文章发布到GitHub仓库。<br>当让也可以不使用上面的生成命令，直接将事先编辑好的<code>.md</code> 文件复制到对应的目录，也是可以的。只不过用命令生成的<code>.md</code>文件会带一个<a href="https://hexo.io/zh-cn/docs/front-matter.html" target="_blank" rel="noopener">Front-matter</a>，内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 文章标题</div><div class="line">date: 创建时间</div><div class="line">tags: 文章标签</div><div class="line">---</div></pre></td></tr></table></figure></p>
<p>所以，事先编辑好的<code>.md</code>文件里也应该包含相应的<a href="https://hexo.io/zh-cn/docs/front-matter.html" target="_blank" rel="noopener">Front-matter</a>。</p>
<h2 id="更换博客主题"><a href="#更换博客主题" class="headerlink" title="更换博客主题"></a>更换博客主题</h2><h3 id="更换默认主题"><a href="#更换默认主题" class="headerlink" title="更换默认主题"></a>更换默认主题</h3><p>Hexo 更换主题很简单，就两步：</p>
<ol>
<li>选择喜欢的主题，可以去<a href="https://hexo.io/themes/" target="_blank" rel="noopener">官网主题页</a>选择喜欢的主题，下载主题包。然后将主题文件夹放到 Hexo 项目的 <strong>themes</strong> 文件夹下。</li>
<li>修改 Hexo 站点配置文件<code>_config.yml</code>中的 Extensions 配置项，修改内容如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Extensions</div><div class="line">## Plugins: https://hexo.io/plugins/</div><div class="line">## Themes: https://hexo.io/themes/</div><div class="line">theme: next</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>博主使用的是<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">NexT主题</a>，所以 theme 项配置的是<code>next</code>，这里配置的字段一定要和 <strong>themes</strong> 文件夹下主题包的文件夹名称相同。下文关于主题的配置均是针对于 NexT 主题，主题的具体使用说明可以参考 <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT 官方网站</a>。</p>
</blockquote>
<h3 id="NexT-主题设置"><a href="#NexT-主题设置" class="headerlink" title="NexT 主题设置"></a>NexT 主题设置</h3><p>NexT 主题的设置在官网的<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">开始使用</a>中说的很详细，我这里就不画蛇添足了，不清楚的可以直接看官网。<br>关于 NexT 主题的文档是我见过的所有 Hexo 主题中最完善的，你所能想到大部分配置都集成到主题了，基本实现了傻瓜式配置。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装环境&quot;&gt;&lt;a href=&quot;#安装环境&quot; class=&quot;headerlink&quot; title=&quot;安装环境&quot;&gt;&lt;/a&gt;安装环境&lt;/h2&gt;&lt;h3 id=&quot;1-安装Homebrew&quot;&gt;&lt;a href=&quot;#1-安装Homebrew&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="开发工具" scheme="http://davidsheh.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Hexo" scheme="http://davidsheh.github.io/tags/Hexo/"/>
    
      <category term="NexT" scheme="http://davidsheh.github.io/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>使用 VS Code 写 Shaderlab</title>
    <link href="http://davidsheh.github.io/2017/08/29/vscode-shaderlab/"/>
    <id>http://davidsheh.github.io/2017/08/29/vscode-shaderlab/</id>
    <published>2017-08-29T10:57:25.000Z</published>
    <updated>2019-01-29T11:10:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>Unity3D 开发中，我们一般使用 VS 写代码，但是对于写 Shader，VS 还不如自带的 MonoDeveloper 强大，而且目前我还没有发现对 Shaderlab支持比较好的 VS 扩展插件。自从试用过 VS Code 后我把电脑上的 Sublime Text 给卸载了，换成了 VS Code 一直用到现在，而且越用越觉得强大，毕竟有微软这个爸爸，发展势头还是很猛的。言归正传，这篇博客打算记录一下我使用 VS Code 写 Shaderlab 的一些经验。</p>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>首先得安装 VS Code，这个是肯定的，没啥好说的。安装好 VS Code 后，在插件页搜索 ShaderlabVSCodeFree 扩展，然后安装重启。装好插件后，使用 VS Code 打开 Shaderlab 文件，就可以愉快的写 Shader 了。该插件支持<code>.shader</code>、<code>.cginc</code>、<code>.glslinc</code>、<code>.compute</code>四种格式的 Shaderlab 文件，同时，还支持语法高亮、基础代码补全、签名帮助 三大功能，基础代码补全这个功能用了一下感觉非常赞，要是再能支持自动格式化就完美了，不过对于免费版来说，已经非常良心了。该插件还有个收费的 <a href="https://www.assetstore.unity3d.com/en/#!/content/94653" target="_blank" rel="noopener">ShaderlabVSCode Beta</a> 版，支持的功能更多，也支持代码格式化，插件作者是中国的 Unity3D 开发者，所以，如果大家手头富裕的话，请支持一下作者，去AssetStore购买 <a href="https://www.assetstore.unity3d.com/en/#!/content/94653" target="_blank" rel="noopener">ShaderlabVSCode Beta</a> 版。</p>
<h2 id="添加代码片段"><a href="#添加代码片段" class="headerlink" title="添加代码片段"></a>添加代码片段</h2><p>为了写代码的方便，常用的 Shaderlab 代码块可以通过 File -&gt; Preferences -&gt; User Snippets 选项，然后找到 Shaderlab 语言，添加进 Json 配置文件，我放两个常用的代码片段：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">/*</div><div class="line">	// Place your snippets for Shaderlab here. Each snippet is defined under a snippet name and has a prefix, body and </div><div class="line">	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</div><div class="line">	// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the </div><div class="line">	// same ids are connected.</div><div class="line">	// Example:</div><div class="line">	"Print to console": &#123;</div><div class="line">		"prefix": "log",</div><div class="line">		"body": [</div><div class="line">			"console.log('$1');",</div><div class="line">			<span class="string">"$2"</span></div><div class="line">		],</div><div class="line">		"description": "Log output to console"</div><div class="line">	&#125;</div><div class="line">*/</div><div class="line"></div><div class="line">	"Unity3D Shaderlab": &#123;</div><div class="line">		"prefix": "shaderlab",</div><div class="line">		"body": [</div><div class="line">			"Shader \"$&#123;1:New Shader&#125;\"",</div><div class="line">			"&#123;",</div><div class="line">				"\tProperties",</div><div class="line">				"\t&#123;",</div><div class="line">					"\t\t_MainTex (\"Texture\", 2D) = \"white\" &#123;&#125;",</div><div class="line">				"\t&#125;",</div><div class="line">				"\tSubShader",</div><div class="line">				"\t&#123;",</div><div class="line">					"\t\tTags &#123; \"RenderType\"=\"$&#123;2:Opaque&#125;\" &#125;\n",</div><div class="line">					"\t\tPass",</div><div class="line">					"\t\t&#123;",</div><div class="line">					"\t\t\t$3",	</div><div class="line">					"\t\t&#125;",</div><div class="line">				"\t&#125;",</div><div class="line">			<span class="string">"&#125;"</span></div><div class="line">		],</div><div class="line">		"description": "Unity3D Shaderlab"</div><div class="line">	&#125;,</div><div class="line"></div><div class="line">	"CGPROGRAM": &#123;</div><div class="line">		"prefix": "cg",</div><div class="line">		"body": [</div><div class="line">			"CGPROGRAM",</div><div class="line">			"#pragma vertex vert",</div><div class="line">			"#pragma fragment frag\n",</div><div class="line">			"#include \"UnityCG.cginc\"\n",</div><div class="line">			"struct appdata",</div><div class="line">			"&#123;",</div><div class="line">				"\tfloat4 vertex : POSITION;",</div><div class="line">				"\tfloat2 uv : TEXCOORD0;",</div><div class="line">			"&#125;;\n",</div><div class="line">			"struct v2f",</div><div class="line">			"&#123;",</div><div class="line">				"\tfloat2 uv : TEXCOORD0;",</div><div class="line">				"\tfloat4 vertex : SV_POSITION;",</div><div class="line">			"&#125;;\n",</div><div class="line">			"sampler2D _MainTex;\n",</div><div class="line">			"v2f vert(appdata v)",</div><div class="line">			"&#123;",</div><div class="line">				"\tv2f o;",</div><div class="line">				"\to.vertex = UnityObjectToClipPos(v.vertex);",</div><div class="line">				"\to.uv = TRANSFORM_TEX(v.uv, _MainTex);\n",</div><div class="line">			</div><div class="line">				"\treturn o;",</div><div class="line">			"&#125;\n",</div><div class="line">			</div><div class="line">			"fixed4 frag(v2f i) : SV_Target",</div><div class="line">			"&#123;",</div><div class="line">				"\t// sample the texture",</div><div class="line">				"\tfixed4 col = tex2D(_MainTex, i.uv);",</div><div class="line">				"\treturn col;",</div><div class="line">			"&#125;",</div><div class="line">			<span class="string">"ENDCG"</span></div><div class="line">		],</div><div class="line">		"description": "Unity3D Shaderlab CGPROGRAM"</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>保存后，可以新建一个扩展名为 <code>.shader</code> 的文本文件，然后输入<code>shaderlab</code>后回车就会自动生成一个标准的 Shaderlab 结构代码块。输入<code>cg</code>后回车就会生成一段 CGPROGRAM 代码块，赶快试试吧！<br>刚开始使用VS Code 写 Shader 先放上两个代码片段，后期再增加其他代码片段。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Unity3D 开发中，我们一般使用 VS 写代码，但是对于写 Shader，VS 还不如自带的 MonoDeveloper 强大，而且目前我还没有发现对 Shaderlab支持比较好的 VS 扩展插件。自从试用过 VS Code 后我把电脑上的 Sublime Text 
    
    </summary>
    
      <category term="开发工具" scheme="http://davidsheh.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Unity3D" scheme="http://davidsheh.github.io/tags/Unity3D/"/>
    
      <category term="VS Code" scheme="http://davidsheh.github.io/tags/VS-Code/"/>
    
      <category term="Shaderlab" scheme="http://davidsheh.github.io/tags/Shaderlab/"/>
    
  </entry>
  
  <entry>
    <title>Mac开发必备工具（三）—— Fish shell</title>
    <link href="http://davidsheh.github.io/2017/08/28/mac-fishshell/"/>
    <id>http://davidsheh.github.io/2017/08/28/mac-fishshell/</id>
    <published>2017-08-28T14:53:41.000Z</published>
    <updated>2019-01-29T11:10:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Fish-shell"><a href="#Fish-shell" class="headerlink" title="Fish shell"></a>Fish shell</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>fish 可以根据输入自动匹配历史命令。它的一大特点是开箱即用，没有zsh那些繁琐的配置。官网：<a href="http://www.fishshell.com/。" target="_blank" rel="noopener">http://www.fishshell.com/。</a></p>
<h2 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h2><p>在终端里使用Homebrew安装，直接输入 <code>brew install fish</code> 等待安装完成即可。安装完了以后还不能用，因为没把fish添加到 mac 的 shell 列表里，切换到 fish shell 时显示找不到fish shell，所以我们要先添加 fish 并设置一下 shell 。首先，用 shell 命令<code>sudo vim /etc/shells</code>在 vim 中打开 Mac 的 shell 列表，执行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># List of acceptable shells for chpass(1).</div><div class="line"># Ftpd will not allow users to connect who are not using</div><div class="line"># one of these shells.</div><div class="line"></div><div class="line">/bin/bash</div><div class="line">/bin/csh</div><div class="line">/bin/ksh</div><div class="line">/bin/sh</div><div class="line">/bin/tcsh</div><div class="line">/bin/zsh</div></pre></td></tr></table></figure>
<p>按<code>i</code>键，进入插入模式，然后在列表末尾加上<code>/usr/local/bin/fish</code>。最后文件内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># List of acceptable shells for chpass(1).</div><div class="line"># Ftpd will not allow users to connect who are not using</div><div class="line"># one of these shells.</div><div class="line"></div><div class="line">/bin/bash</div><div class="line">/bin/csh</div><div class="line">/bin/ksh</div><div class="line">/bin/sh</div><div class="line">/bin/tcsh</div><div class="line">/bin/zsh</div><div class="line">/usr/local/bin/fish</div></pre></td></tr></table></figure>
<p>最后，按 esc 键跳到命令模式，输入<code>:wq</code> 命令保存文件并退出vim。当前模式还是 bash shell 模式，要切换到 fish shell 需要输入 <code>fish</code> 命令。每次都输入命令切换 shell 比较繁琐，我们可以通过如下命令从 bash 切换到 fish ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chsh -s /usr/local/bin/fish</div></pre></td></tr></table></figure></p>
<p>也可以通过如下命令切回到 bash：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chsh -s /bin/bash</div></pre></td></tr></table></figure></p>
<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><ol>
<li>自动建议<br>Fish 会自动在光标后面给出建议，颜色为灰色。按下<code>→</code>或<code>Control + F</code>表示采纳建议，按下<code>Alt + →</code>表示只采纳一部分。</li>
<li>Tab 键补全<br>按下 <code>Tab</code> 键，Fish 将尝试自动补全命令、参数或路径，如果有多条补全建议，可以继续使用 <code>Tab</code> 键在不同建议间切换。</li>
</ol>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>因为博主并不是天天跟命令行打交道，shell 也根本不会，只是在学习和工作中偶尔会用到命令行，敲几行命令执行一些操作，所以这篇文章只是简单的介绍 Fish shell，作为一个学习的记录，想深入了解的可以访问<a href="https://www.fishshell.com/" target="_blank" rel="noopener">官网</a>。<br>有了 Homebrew + iTerm 2 + Fish shell，对命令行有畏惧和抵触情绪的「终端恐惧症患者」再也不用头疼了。关于 Homebrew 和 iTerm 2 的介绍请看我的另外两篇文章：<a href="http://davidsheh.github.io/2017/08/26/mac-homebrew/">Mac开发必备工具（一）—— Homebrew</a>、<a href="http://davidsheh.github.io/2017/08/27/mac-iterm2/">Mac开发必备工具（二）—— iTerm 2</a>。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.fishshell.com/docs/current/tutorial.html" target="_blank" rel="noopener">fish tutorial</a></p>
<hr>
<p><strong>同系列文章</strong></p>
<p><a href="http://davidsheh.github.io/2017/08/26/mac-homebrew/">Mac开发必备工具（一）—— Homebrew</a></p>
<p><a href="http://davidsheh.github.io/2017/08/27/mac-iterm2/">Mac开发必备工具（二）—— iTerm 2</a></p>
<p><a href="http://davidsheh.github.io/2017/08/28/mac-fishshell/">Mac开发必备工具（三）—— Fish shell</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Fish-shell&quot;&gt;&lt;a href=&quot;#Fish-shell&quot; class=&quot;headerlink&quot; title=&quot;Fish shell&quot;&gt;&lt;/a&gt;Fish shell&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerli
    
    </summary>
    
      <category term="开发工具" scheme="http://davidsheh.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Mac" scheme="http://davidsheh.github.io/tags/Mac/"/>
    
      <category term="Fish shell" scheme="http://davidsheh.github.io/tags/Fish-shell/"/>
    
      <category term="Shell" scheme="http://davidsheh.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Mac开发必备工具（二）—— iTerm 2</title>
    <link href="http://davidsheh.github.io/2017/08/27/mac-iterm2/"/>
    <id>http://davidsheh.github.io/2017/08/27/mac-iterm2/</id>
    <published>2017-08-27T10:20:12.000Z</published>
    <updated>2019-01-29T11:10:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iTerm-2"><a href="#iTerm-2" class="headerlink" title="iTerm 2"></a>iTerm 2</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>iTerm 2 is a terminal emulator for Mac OS X that does amazing things.</p>
</blockquote>
<p>iTerm 2 有很多能够提升效率的实用功能。比如说窗口分割、热键窗口、智能搜索、自动完成、快速复制等等，其他功能可查看<a href="https://www.iterm2.com/features.html" target="_blank" rel="noopener">官网的Features页</a>。</p>
<h2 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>有两种方式可以安装iTerm 2：</p>
<ol>
<li>直接从<a href="https://www.iterm2.com/index.html" target="_blank" rel="noopener">官网</a>下载安装包。</li>
<li>使用 Homebrew 命令<code>brew install iTerm2</code>安装。</li>
</ol>
<p>个人推荐使用第二种方式安装。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>关于 iTerm 2 的配置可以参考官网介绍，然后根据自己的喜好配置。这里介绍一个实用的快捷键配置和一个主题配置。</p>
<h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><p>快速显示和隐藏 iTerm 2 的快捷键设置如下图：<br><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/iterm2_hotkey.jpg" alt="iTerm 2 Hotkey"><br>快捷键的设置可以根据自己的使用习惯来设置。</p>
<h4 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h4><p>经过多款主题的对比，最终选择了推荐最多的一款主题<a href="http://ethanschoonover.com/solarized" target="_blank" rel="noopener">Solarized</a>。选择这款主题是因为它有自己的<a href="http://ethanschoonover.com/solarized" target="_blank" rel="noopener">官网</a>，同时支持主流的编辑器和 IDE。主题配置步骤如下：</p>
<ol>
<li>先去<a href="http://ethanschoonover.com/solarized" target="_blank" rel="noopener">官网</a>下载主题压缩包，<a href="http://ethanschoonover.com/solarized/files/solarized.zip" target="_blank" rel="noopener">直接下载链接点这里</a>。</li>
<li>下载后解压，然后<code>⌘+,</code>打开 iTerm 2 的首选项，接着 Profiles -&gt; Colors -&gt; Color Presets -&gt; Import，选择刚解压的文件夹<code>solarized/iterm2-colors-solarized</code>下的<code>Solarized Dark.itermcolors</code>文件。</li>
<li>在Color Presets 下拉菜单中选中 Solarized Dark 主题，大功告成。</li>
<li>配置截图如下：<br><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/iterm2_theme.jpg" alt="iTerm 2 Hotkey"></li>
</ol>
<p>这里放一张效果图简单的预览一下主题的效果。<br><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/iterm2_preview.jpg" alt="Solarized Preview"></p>
<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><ol>
<li><code>⌘+T</code> 打开一个新的标签页</li>
<li><code>⌘+;</code> 弹出自动补齐窗口</li>
<li><code>⌘+Shift+;</code> 弹出历史命令记录窗口</li>
<li><code>⌘+Shift+H</code> 弹出历史粘贴记录窗口</li>
<li><code>⌘+←</code>、<code>⌘+→</code>、 <code>⌘+{</code>, <code>⌘+}</code>、<code>⌘+&lt;number&gt;</code> 切换标签页</li>
<li><code>⌘+F</code> 智能查找，支持正则查找</li>
<li><code>⌘+[</code>、<code>⌘+]</code>、<code>⌘+Option+方向键</code> 切换 pane</li>
<li><code>⌘+D</code>  水平切分屏幕，<code>⌘+Shift+D</code> 垂直切分屏幕</li>
<li><code>⌘+Enter</code> 进入与返回全屏模式</li>
</ol>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>当然，iTerm 2 的功能远远不止这些，本文只是博主在使用过程中的一个记录和总结，后续用到其他高级功能了再来补充，待续…</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://www.iterm2.com/documentation.html" target="_blank" rel="noopener">iTerm2官方文档</a></p>
<hr>
<p><strong>同系列文章</strong></p>
<p><a href="http://davidsheh.github.io/2017/08/26/mac-homebrew/">Mac开发必备工具（一）—— Homebrew</a></p>
<p><a href="http://davidsheh.github.io/2017/08/27/mac-iterm2/">Mac开发必备工具（二）—— iTerm 2</a></p>
<p><a href="http://davidsheh.github.io/2017/08/28/mac-fishshell/">Mac开发必备工具（三）—— Fish shell</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iTerm-2&quot;&gt;&lt;a href=&quot;#iTerm-2&quot; class=&quot;headerlink&quot; title=&quot;iTerm 2&quot;&gt;&lt;/a&gt;iTerm 2&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简
    
    </summary>
    
      <category term="开发工具" scheme="http://davidsheh.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Mac" scheme="http://davidsheh.github.io/tags/Mac/"/>
    
      <category term="iTerm 2" scheme="http://davidsheh.github.io/tags/iTerm-2/"/>
    
      <category term="Solarized" scheme="http://davidsheh.github.io/tags/Solarized/"/>
    
  </entry>
  
  <entry>
    <title>Mac开发必备工具（一）—— Homebrew</title>
    <link href="http://davidsheh.github.io/2017/08/26/mac-homebrew/"/>
    <id>http://davidsheh.github.io/2017/08/26/mac-homebrew/</id>
    <published>2017-08-26T15:18:42.000Z</published>
    <updated>2019-01-29T11:10:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>macOS 缺失的软件包管理器。使用 Homebrew 安装 Apple 没有预装但 <a href="https://github.com/Homebrew/homebrew-core/tree/master/Formula" target="_blank" rel="noopener">你需要的东西</a>。<a href="https://brew.sh/" target="_blank" rel="noopener">官网</a>有中文说明。</p>
<h2 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h2><p>Homebrew 的安装非常简单，将下面这条命令粘贴到终端：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure></p>
<p>等待命令执行完毕。其他配置见<a href="https://brew.sh/index_zh-cn.html" target="_blank" rel="noopener">官网中文说明</a>。</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ol>
<li><code>brew help</code> 查看帮助</li>
<li><code>brew install &lt;package name&gt;</code> 安装软件包</li>
<li><code>brew uninstall &lt;package name&gt;</code> 卸载软件包</li>
<li><code>brew list [--versions]</code> 列出已安装的软件包(包括版本)</li>
<li><code>brew search &lt;package name&gt;</code> 查找软件包</li>
<li><code>brew info &lt;package name&gt;</code> 查看软件包信息</li>
<li><code>brew update</code> 更新brew</li>
<li><code>brew outdated</code> 列出过时的软件包（已安装但不是最新版本）</li>
<li><code>brew upgrade [&lt;package name&gt;]</code> 更新过时的软件包（不指定软件包表示更新全部）</li>
<li><code>brew doctor</code> 检查brew运行状态</li>
</ol>
<h2 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">brew install wget</div><div class="line">brew install curl</div><div class="line">brew install openssl</div><div class="line"></div><div class="line">brew install fish      #安装fish shell</div><div class="line">brew install git-flow  #安装git-flow</div><div class="line">brew install python    #安装python</div></pre></td></tr></table></figure>
<h2 id="Homebrew-Cask"><a href="#Homebrew-Cask" class="headerlink" title="Homebrew-Cask"></a>Homebrew-Cask</h2><p>Homebrew-Cask 是 Homebrew 的一个扩展。它能够优雅、简单、快速的安装和管理 macOS 图形界面程序，比如Google Chrome 和Dropbox等等。官网 <a href="https://caskroom.github.io/。" target="_blank" rel="noopener">https://caskroom.github.io/。</a></p>
<h3 id="Cask-必装的理由"><a href="#Cask-必装的理由" class="headerlink" title="Cask 必装的理由"></a>Cask 必装的理由</h3><p>有图形界面的软件可以直接在 App Stroe 中下载更新，为啥还需要 Cask 呢？因为有的很好用的免费 Mac 软件并没有选择在 App Store 上架，对于没有上架的软件我们只能是通过搜索找到官网然后在下载安装包，这样不够优雅也不方便管理，而使用 Cask 可以通过一行命令就搞定安装了，还可以统一更新升级所有的软件，实现从非 App Store 途径安装的软件的统一管理。<br>Cask 从软件官方网站下载软件包，然后在后台安装并将 <code>.app</code> 移动到 <code>Applications</code>。通过 Cask 安装的软件也会在 Lanuchpad 显示，跟从 App Store 安装的软件没啥区别。对于那些收费的软件，用 Cask 安装只是比普通安装方法节省了时间和步骤，没啥其他的区别。</p>
<h3 id="Cask-常用命令"><a href="#Cask-常用命令" class="headerlink" title="Cask 常用命令"></a>Cask 常用命令</h3><ol>
<li><code>brew cask -help</code> 查看帮助</li>
<li><code>brew cask install &lt;software name&gt;</code> 安装软件</li>
<li><code>brew cask uninstall &lt;software name&gt;</code> 卸载软件</li>
<li><code>brew cask search &lt;software name&gt;</code> 搜索软件</li>
<li><code>brew cask info  &lt;software name&gt;</code> 查看软件相关信息</li>
<li><code>brew cask list</code> 列出通过 Homebrew-Cask 安装的包</li>
</ol>
<blockquote>
<p>经过测试，虽然 <code>-help</code> 是未知命令，但是仍然可查看 Cask 的命令，其他帮助命令（如 <code>brew cask -h</code> 和 <code>brew cask --help</code>）好像都不行。还有其他的命令就不一一介绍了，其他命令可以通过<code>brew cask -help</code>查看。</p>
</blockquote>
<h3 id="Cask-常用软件"><a href="#Cask-常用软件" class="headerlink" title="Cask 常用软件"></a>Cask 常用软件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">brew cask install iterm2         #安装iTerm 2</div><div class="line">brew cask install launchrocket   #管理软件后台服务</div><div class="line">brew cask install google-chrome  #安装Chrome</div><div class="line">brew cask install the-unarchiver #解压软件</div><div class="line">brew cask install alfred         #效率软件</div><div class="line">brew cask install qq             #腾讯QQ</div><div class="line">brew cask install evernote       #云笔记软件</div><div class="line">brew cask install sublime-text   #文本编辑器</div><div class="line">brew cask install skitch         #ervernote配套的截图软件</div><div class="line">brew cask install dropbox        #文件同步软件</div><div class="line">brew cask install zotero         #网页收藏与文献管理软件</div><div class="line">brew cask install anki           #记忆软件</div><div class="line">brew cask install virtualbox     #虚拟机，可以装个Windows</div><div class="line">brew cask install self-control   #避免分心的软件</div><div class="line">brew cask install vlc            #视频软件</div><div class="line">brew cask install appcleaner     #应用清理</div><div class="line"></div><div class="line">#Quick Look 系列</div><div class="line">brew cask install qlcolorcode    #预览脚本时自动代码配色</div><div class="line">brew cask install qlstephen      #预览未知拓展名的纯文本文件</div><div class="line">brew cask install qlmarkdown     #预览Markdown文件</div><div class="line">brew cask install quicklook-json #预览JSON文件</div><div class="line">brew cask install quicklook-csv  #预览CSV文件</div></pre></td></tr></table></figure>
<p>Homebrew-Cask 是一个开源项目，其详细信息可以看<a href="https://github.com/caskroom/homebrew-cask" target="_blank" rel="noopener">其开源项目介绍</a>，所支持的软件列表在这里：<a href="https://github.com/caskroom/homebrew-cask/tree/master/Casks" target="_blank" rel="noopener">https://github.com/caskroom/homebrew-cask/tree/master/Casks</a> 。<br>如果觉得管理软件在后台运行的服务很麻烦，可以装个<a href="https://github.com/jimbojsb/launchrocket" target="_blank" rel="noopener">LaunchRocket</a>，这也是个开源项目。<br>关于 Quick Look 的介绍可以看这篇文章<a href="https://sspai.com/post/31927" target="_blank" rel="noopener">加强你的「一指禅」：Mac QuickLook「快速预览」兼容性扩展教程</a>，同时<a href="https://github.com/sindresorhus/quick-look-plugins" target="_blank" rel="noopener">Quick Look plugins</a>这个开源项目列出了所有支持 Homebrew-Cask 的 Quick Look 扩展，据说支持的都是程序员必备。</p>
<h2 id="轻松实现一键装机"><a href="#轻松实现一键装机" class="headerlink" title="轻松实现一键装机"></a>轻松实现一键装机</h2><p>在使用 Mac 的过程中，总想着有没有方便、简单的办法实现在不同Mac 上同步开发环境的办法，今天在整理 Homebrew 使用笔记的时候突然冒出一个想法，如果我把所有的 Homebrew 安装命令列成一个清单形式，当在另一台新的 Mac 上工作时，那么就可以先装一个 Homebrew 然后将命令清单中的所有命令复制粘贴到终端中，等待命令执行完毕后，新的 Mac 的大部分开发环境就跟常用的 Mac 开发环境一致了。下面列出笔者的常用命令清单：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">#安装 Homebrew</div><div class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div><div class="line"></div><div class="line">#安装基础套件</div><div class="line">brew install fish      #安装fish shell</div><div class="line">brew install git-flow  #安装git-flow</div><div class="line">brew install python    #安装python</div><div class="line"></div><div class="line">#Homebrew-Cask</div><div class="line">brew tap caskroom/cask</div><div class="line"></div><div class="line"># 安装Cask基础软件</div><div class="line">brew cask install iterm2         #安装iTerm 2</div><div class="line">brew cask install visual-studio-code#微软出品的文本编辑器，可替代 Sublime Text</div><div class="line">brew cask install google-chrome  #安装Chrome</div><div class="line">brew cask install the-unarchiver #解压软件</div><div class="line">brew cask install alfred         #效率软件</div><div class="line">brew cask install qq             #腾讯QQ</div><div class="line">brew cask install sourcetree     #Git GUI 客户端</div><div class="line">brew cask install cheatsheet     # 显示当前程序的快捷键列表，默认的快捷键是长按⌘</div></pre></td></tr></table></figure></p>
<p>这份清单会随着我对 Mac 的不断深入了解而持续更新，欢迎关注 <a href="https://davidsheh.github.io/">Sheh 伟伟的个人博客</a>。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://aaaaaashu.gitbooks.io/mac-dev-setup/content/Homebrew/index.html" target="_blank" rel="noopener">Mac 开发配置手册</a></p>
<hr>
<p><strong>同系列文章</strong></p>
<p><a href="http://davidsheh.github.io/2017/08/26/mac-homebrew/">Mac开发必备工具（一）—— Homebrew</a></p>
<p><a href="http://davidsheh.github.io/2017/08/27/mac-iterm2/">Mac开发必备工具（二）—— iTerm 2</a></p>
<p><a href="http://davidsheh.github.io/2017/08/28/mac-fishshell/">Mac开发必备工具（三）—— Fish shell</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Homebrew&quot;&gt;&lt;a href=&quot;#Homebrew&quot; class=&quot;headerlink&quot; title=&quot;Homebrew&quot;&gt;&lt;/a&gt;Homebrew&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="开发工具" scheme="http://davidsheh.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Mac" scheme="http://davidsheh.github.io/tags/Mac/"/>
    
      <category term="Homebrew" scheme="http://davidsheh.github.io/tags/Homebrew/"/>
    
      <category term="Homebrew-Cask" scheme="http://davidsheh.github.io/tags/Homebrew-Cask/"/>
    
  </entry>
  
  <entry>
    <title>Unity3D集成腾讯语音GVoiceSDK</title>
    <link href="http://davidsheh.github.io/2017/05/27/Unity3D%E9%9B%86%E6%88%90%E8%85%BE%E8%AE%AF%E8%AF%AD%E9%9F%B3GVoiceSDK/"/>
    <id>http://davidsheh.github.io/2017/05/27/Unity3D集成腾讯语音GVoiceSDK/</id>
    <published>2017-05-27T05:15:37.000Z</published>
    <updated>2019-01-29T11:10:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>友情提示：最近发现腾讯GVoice有另一个官网，叫做<a href="http://gcloud.qq.com/product/6" target="_blank" rel="noopener">腾讯游戏服务</a>，经过对比发现这个网站才是最新的，下面我介绍的那个估计是已经废弃的，但不知道为啥老的网站没有直接链接到新网址而是仍然保留了。不过新官网的文档更加详细，SDK也有所更新，所以建议去新官网下载SDK和Demo，接入流程基本没有啥大变化。</p>
</blockquote>
<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>我们项目中用到了实时语音功能，在最初语音 SDK 技术选型的时候测试过融云、声网和腾讯的 GVoice 。融云和声网我都在我们项目中使用过，但是效果都不如王者荣耀游戏中的实时语音效果，这两天好好研究了一下腾讯的 GVoice，终于成功集成。由于腾讯 GVoice 官网的接入流程并不是很详细，如果只懂 Unity3D 不懂 Android 基础知识的朋友，可能接入过程不会一帆风顺。我虽了解一点点 Android 基础，但仍趟过了好几个坑，下面我就分享一下我在 Android 平台接入 GVoice 的过程。</p>
<h2 id="资源准备"><a href="#资源准备" class="headerlink" title="资源准备"></a>资源准备</h2><p>进入<a href="https://www.qcloud.com/document/product/556/7673" target="_blank" rel="noopener">腾讯GVoice官网</a>下载 GVoice SDK 和 Unity3D Demo。如下图：</p>
<p><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/gvoice_1.jpg" alt="GVoice SDK.png"></p>
<h2 id="接入流程"><a href="#接入流程" class="headerlink" title="接入流程"></a>接入流程</h2><h3 id="1-导入SDK"><a href="#1-导入SDK" class="headerlink" title="1. 导入SDK"></a>1. 导入SDK</h3><p>先创建一个空的 Unity 项目 GVoiceDemo，按照官网的接入流程，我们直接将下载的SDK压缩包解压后将其中的 Plugins 和 Scripts 两个文件夹都拷贝到 Unity 项目中。</p>
<h3 id="2-创建-Jar-包"><a href="#2-创建-Jar-包" class="headerlink" title="2. 创建 Jar 包"></a>2. 创建 Jar 包</h3><p>将Unity项目导出成安卓项目，导出路径选择某个指定的文件夹，我这里在桌面新建了一个叫 unity_gvoicedemo 的文件夹，将项目导出到该文件夹中，操作如下图：</p>
<p><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/gvoice_2.jpg" alt="Export Project.png"><br>导出成功后会生成 GCloudVoice 和 GVoiceDemo 两个文件夹，用 eclipse 将这两个项目一起导入，如下图</p>
<p><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/gvoice_3.jpg" alt="Import Projects.png"></p>
<p>导入成功后，在 UnityPlayerActivity 项目下新建一个 MainActivity 类，继承自 UnityPlayerActivity，详细代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.shehweiwei.gvoicedemo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.tencent.gcloud.voice.GCloudVoiceEngine;</div><div class="line"><span class="comment">// 注意：下面这句代码必须有，如果没有可能会导致闪退</span></div><div class="line"><span class="keyword">import</span> com.unity3d.player.UnityPlayerActivity;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">UnityPlayerActivity</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span></div><div class="line"><span class="function">	</span>&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		GCloudVoiceEngine.getInstance().init(getApplicationContext(), <span class="keyword">this</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>注意：代码中一定要引入<code>com.unity3d.player.UnityPlayerActivity</code>这个包，如果没有引入则进入应用就闪退，这里是个大坑，我好不容易才爬出来。</strong><br>然后，选中 MainActivity.java 文件，右键选择 Export -&gt; Java -&gt; JAR file， 然后点击 Next 按钮， 接下来操作如下图：</p>
<p><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/gvoice_4.jpg" alt="JAR Export.png"></p>
<p>最后，生成一个 GVoiceDemo.jar 文件。</p>
<h3 id="3-导入其他文件"><a href="#3-导入其他文件" class="headerlink" title="3. 导入其他文件"></a>3. 导入其他文件</h3><p>将下载的 unity_demo.zip 压缩包解压后将其中的 <code>unity_demo\Assets\Plugins\Android</code> 目录下的 AndroidManifest.xml 和 android-support-v4.jar 两个文件拷贝到项目的 <code>Plugins\Android</code> 目录下。注意还有个GCloudVoiceDemo.jar 文件我们没有拷贝，这里我们使用上一步创建的 GVoiceDemo.jar 文件来替代。注意 jar 包中的包名必须与 AndroidManifest.xml 文件和 Unity 编辑器中PlayerSettings的 Bundle Identifier 包名保持一致。所以，要把 AndroidManifest.xml 文件中的 <code>package=&quot;com.example.gcloudu3ddemo&quot;</code> 这一句代码修改成 <code>package=&quot;com.shehweiwei.gvoicedemo&quot;</code>。</p>
<p><strong>注意：</strong>AndroidManifest.xml 文件中的入口 Activity 的名字必须和创建的 Jar 包中的新建的 Activity 名字保持一致。这里的入口 Activity 叫 MainActivity，所以 AndroidManifest.xml  文件中的代码为<code>android:name=&quot;.MainActivity&quot;</code>，当然也可以写成 <code>android:name=&quot;com.example.gcloudu3ddemo.MainActivity&quot;</code></p>
<h3 id="4-构建Unity场景"><a href="#4-构建Unity场景" class="headerlink" title="4. 构建Unity场景"></a>4. 构建Unity场景</h3><p>这里我用uGUI搭建了一个简单的界面，有六个按钮分别调用 GVoice SDK 的六个 API ，然后一个 Text 用来显示回调结果。界面效果如下图：<br><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/gvoice_5.jpg" alt="Create UI.png"><br>然后新建一个 GVoiceDemo 的 C# 脚本，脚本代码如下：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> UnityEngine;</div><div class="line"><span class="keyword">using</span> gcloud_voice;</div><div class="line"><span class="keyword">using</span> UnityEngine.UI;</div><div class="line"><span class="keyword">using</span> System;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GVoiceDemo</span> : <span class="title">MonoBehaviour</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 用来显示调用API返回的结果</span></div><div class="line">    <span class="keyword">public</span> Text result;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> IGCloudVoice m_voiceengine = <span class="literal">null</span>;</div><div class="line"></div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> 这里的appId和appKey使用的是官方提供的测试值，正式项目中可使用申请的值</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">string</span> appId = <span class="string">"932849489"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">string</span> appKey = <span class="string">"d94749efe9fce61333121de84123ef9b"</span>;</div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> 这里使用的是测试账号，所以房间名使用默认的100，正式项目中可根据实际情况赋值</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">string</span> roomName = <span class="string">"100"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span> (m_voiceengine == <span class="literal">null</span>)</div><div class="line">        &#123;</div><div class="line">            m_voiceengine = GCloudVoice.GetEngine();</div><div class="line">            TimeSpan ts = DateTime.UtcNow - <span class="keyword">new</span> DateTime(<span class="number">1970</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">            <span class="keyword">string</span> strTime = System.Convert.ToInt64(ts.TotalSeconds).ToString();</div><div class="line">            <span class="comment">// <span class="doctag">TODO:</span> 这里用时间模拟了一个openId，在正式项目中应该把这里的strTime换成用户唯一ID</span></div><div class="line">            m_voiceengine.SetAppInfo(appId, appKey, strTime);</div><div class="line">            m_voiceengine.Init();</div><div class="line"></div><div class="line">            <span class="comment">// 注册SDK常用回调监听</span></div><div class="line">            m_voiceengine.OnJoinRoomComplete += OnJoinRoom;</div><div class="line">            m_voiceengine.OnQuitRoomComplete += OnExitRoom;</div><div class="line">            m_voiceengine.OnMemberVoice += OnMemberVoice;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span> (m_voiceengine != <span class="literal">null</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="comment">// 不断检测GVoice引擎回调</span></div><div class="line">            m_voiceengine.Poll();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnApplicationPause</span>(<span class="params"><span class="keyword">bool</span> pauseStatus</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span> (m_voiceengine == <span class="literal">null</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 应用暂停时GVoice引擎也暂停，应用重新开始时引擎继续</span></div><div class="line">        <span class="keyword">if</span> (pauseStatus)</div><div class="line">        &#123;</div><div class="line">            m_voiceengine.Pause();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            m_voiceengine.Resume();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 加入房间，BtnJoin按钮点击调用</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">JoinRoom</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        m_voiceengine.SetMode(GCloudVoiceMode.RealTime);</div><div class="line">        <span class="keyword">int</span> ret = m_voiceengine.JoinTeamRoom(roomName, <span class="number">15000</span>);</div><div class="line"></div><div class="line">        result.text += <span class="string">"\nJoinRoom:"</span> + ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 退出房间，BtnExit按钮点击调用</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ExitRoom</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">int</span> ret = m_voiceengine.QuitRoom(roomName, <span class="number">6000</span>);</div><div class="line">        result.text += <span class="string">"\nExitRoom:"</span> + ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 打开麦克风，BtnOpenMic按钮点击调用</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OpenMic</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">int</span> ret = m_voiceengine.OpenMic();</div><div class="line">        result.text += <span class="string">"\nOpenMic:"</span> + ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 关闭麦克风，BtnCloseMic按钮点击调用</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CloseMic</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">int</span> ret = m_voiceengine.CloseMic();</div><div class="line">        result.text += <span class="string">"\nCloseMic:"</span> + ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 打开扬声器，BtnOpenSpeaker按钮点击调用</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OpenSpeaker</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">int</span> ret = m_voiceengine.OpenSpeaker();</div><div class="line">        result.text += <span class="string">"\nOpenSpeaker:"</span> + ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 关闭扬声器，BtnCloseSpeaker按钮点击调用</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CloseSpeaker</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">int</span> ret = m_voiceengine.CloseSpeaker();</div><div class="line">        result.text += <span class="string">"\nCloseSpeaker:"</span> + ret;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 加入房间回调</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="code"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="roomName"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="memberID"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnJoinRoom</span>(<span class="params">IGCloudVoice.GCloudVoiceCompleteCode code, <span class="keyword">string</span> roomName, <span class="keyword">int</span> memberID</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        result.text += <span class="keyword">string</span>.Format(<span class="string">"\nOnJoinRoom ---&gt; code: &#123;0&#125;, roomName: &#123;1&#125;, memberID: &#123;2&#125;"</span>, code, roomName, memberID);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 退出房间回调</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="code"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="roomName"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="memberID"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnExitRoom</span>(<span class="params">IGCloudVoice.GCloudVoiceCompleteCode code, <span class="keyword">string</span> roomName, <span class="keyword">int</span> memberID</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        result.text += <span class="keyword">string</span>.Format(<span class="string">"\nOnExitRoom ---&gt; code: &#123;0&#125;, roomName: &#123;1&#125;, memberID: &#123;2&#125;"</span>, code, roomName, memberID);</div><div class="line"></div><div class="line">        m_voiceengine.OnJoinRoomComplete -= OnJoinRoom;</div><div class="line">        m_voiceengine.OnQuitRoomComplete -= OnExitRoom;</div><div class="line">        m_voiceengine.OnMemberVoice -= OnMemberVoice;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 有成员说话时回调</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="members"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="count"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnMemberVoice</span>(<span class="params"><span class="keyword">int</span>[] members, <span class="keyword">int</span> count</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        result.text += <span class="keyword">string</span>.Format(<span class="string">"\nOnMemberVoice ---&gt; count: &#123;0&#125;, roomName: &#123;1&#125;, memberID: &#123;2&#125;"</span>, count);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>将 GVoiceDemo 脚本添加到Canvas对象上，然后将脚本中对应的方法注册到对应的按钮的OnClick事件上，保存场景，然后运行到手机上，使用两个手机就可以语音聊天了，效果如下图：</p>
<p><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/gvoice_6.jpg" alt="App.png"></p>
<h2 id="其他事项"><a href="#其他事项" class="headerlink" title="其他事项"></a>其他事项</h2><p>按照上面的流程集成完的项目并不能在PC上运行，如果要在PC上运行不报错，可以将下载的 unity_demo.zip 文件解压后的 <code>unity_demo\Assets\Plugins</code> 目录下的 X86 和 x86_64 两个文件夹拷贝到项目的 Plugins 文件夹下，这样PC上运行就不会报错。因为我这里没有麦克风设备，不知道在PC上能不能使用语音聊天，有条件的朋友可以试试，有结果了可以反馈给我，先谢过了！</p>
<h2 id="项目源码"><a href="#项目源码" class="headerlink" title="项目源码"></a>项目源码</h2><p>我把项目的源码托管在了Github上了， 有需要的朋友自取。<a href="https://github.com/DavidSheh/GVoiceDemo/" target="_blank" rel="noopener">项目链接点这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;友情提示：最近发现腾讯GVoice有另一个官网，叫做&lt;a href=&quot;http://gcloud.qq.com/product/6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;腾讯游戏服务&lt;/a&gt;，经过对比发现这个网站才是最新的
    
    </summary>
    
      <category term="技术笔记" scheme="http://davidsheh.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Unity3D" scheme="http://davidsheh.github.io/tags/Unity3D/"/>
    
      <category term="GVoice" scheme="http://davidsheh.github.io/tags/GVoice/"/>
    
  </entry>
  
  <entry>
    <title>Unity路径的相关总结</title>
    <link href="http://davidsheh.github.io/2017/02/09/Unity%E8%B7%AF%E5%BE%84%E7%9A%84%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93/"/>
    <id>http://davidsheh.github.io/2017/02/09/Unity路径的相关总结/</id>
    <published>2017-02-09T09:43:25.000Z</published>
    <updated>2019-01-29T11:10:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Unity中的路径变量"><a href="#一、Unity中的路径变量" class="headerlink" title="一、Unity中的路径变量"></a>一、Unity中的路径变量</h3><ol>
<li>Application.dataPath<br>应用数据文件夹的路径，只读。</li>
<li>Application.streamingAssetsPath<br>应用的流式数据缓存目录，该目录下可以保存一些外部数据文件。</li>
<li>Application.temporaryCachePath<br>设备的临时数据缓存目录。</li>
<li>Application.persistentDataPath<br>iOS/Android设备中的持久化数据存储目录，可以在此路径下存储一些持久化的数据文件，该目录下的文件不会因为App升级而删除。</li>
</ol>
<h3 id="二、不同平台下的路径"><a href="#二、不同平台下的路径" class="headerlink" title="二、不同平台下的路径"></a>二、不同平台下的路径</h3><table>
<thead>
<tr>
<th style="text-align:left">路径变量</th>
<th style="text-align:left">Windows</th>
<th style="text-align:left">Android</th>
<th style="text-align:left">iOS</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Application.dataPath</td>
<td style="text-align:left">应用的路径/appname _Data</td>
<td style="text-align:left">/data/app/package name-1/base.apk</td>
<td style="text-align:left">/var/containers/Bundle/Application/app sandbox/xxx.app/Data</td>
</tr>
<tr>
<td style="text-align:left">Application.streamingAssetsPath</td>
<td style="text-align:left">应用路径/appname _Data/StreamingAssets</td>
<td style="text-align:left">jar:file:///data/app/package name-1/base.apk!/assets</td>
<td style="text-align:left">/var/containers/Bundle/Application/app sandbox/test.app/Data/Raw</td>
</tr>
<tr>
<td style="text-align:left">Application.temporaryCachePath</td>
<td style="text-align:left">C:\Users\username\AppData\Local\Temp\company name\product name</td>
<td style="text-align:left"><strong>Internal Only:</strong> /data/user/0/package name/cache <strong>External(SDCard):</strong>  /storage/emulated/0/Android/data/package name/cache</td>
<td style="text-align:left">/var/mobile/Containers/Data/Application/app sandbox/Library/Caches</td>
</tr>
<tr>
<td style="text-align:left">Application.persistentDataPath</td>
<td style="text-align:left">C:\Users\username\AppData\LocalLow\company name\product name</td>
<td style="text-align:left"><strong>Internal Only:</strong> /data/user/0/ package name/files            <strong>External(SDCard):</strong>  /storage/emulated/0/Android/data/package name/files</td>
<td style="text-align:left">/var/mobile/Containers/Data/Application/app sandbox/Documents</td>
</tr>
</tbody>
</table>
<blockquote>
<p>说明：Android平台下的路径会根据SD卡的访问权限不同而不同。至于iOS有没有类似的情况，由于没有相关设备，暂时没有测试。有条件的朋友可以帮我测试一下，我用5.3.4f1版本的Unity写了个简单的测试程序，项目链接：<a href="http://pan.baidu.com/s/1gfqmORh。" target="_blank" rel="noopener">http://pan.baidu.com/s/1gfqmORh。</a> 欢迎测试反馈，不胜感激！</p>
</blockquote>
<h3 id="三、常用工具方法"><a href="#三、常用工具方法" class="headerlink" title="三、常用工具方法"></a>三、常用工具方法</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 获取不同平台的流式加载路径</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="filename"&gt;</span>文件名<span class="doctag">&lt;/param&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GetStreamingFilePath</span>(<span class="params"><span class="keyword">string</span> filename</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">string</span> path = <span class="string">""</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (Application.platform == RuntimePlatform.OSXEditor || Application.platform == RuntimePlatform.OSXPlayer ||</div><div class="line">            Application.platform == RuntimePlatform.WindowsEditor || Application.platform == RuntimePlatform.WindowsPlayer)</div><div class="line">        &#123;</div><div class="line">            path = Application.streamingAssetsPath + <span class="string">"/"</span> + filename;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Application.platform == RuntimePlatform.IPhonePlayer)</div><div class="line">        &#123;</div><div class="line">            path = Application.dataPath + <span class="string">"/Raw/"</span> + filename;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Application.platform == RuntimePlatform.Android)</div><div class="line">        &#123;</div><div class="line">            path = <span class="string">"jar:file://"</span> + Application.dataPath + <span class="string">"!/assets/"</span> + filename;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            path = Application.dataPath + <span class="string">"/config/"</span> + filename;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> path;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 获取不同平台的持久化数据存储路径</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="filename"&gt;</span>文件名<span class="doctag">&lt;/param&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GetPersistentFilePath</span>(<span class="params"><span class="keyword">string</span> filename</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">string</span> filepath = Application.persistentDataPath + <span class="string">"/"</span> + filename;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> UNITY_IPHONE</span></div><div class="line">        <span class="comment">// Set file flag to be excluded from iCloud/iTunes backup.</span></div><div class="line">        UnityEngine.iOS.Device.SetNoBackupFlag(filepath);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">        <span class="keyword">return</span> filepath;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="四、参考文献"><a href="#四、参考文献" class="headerlink" title="四、参考文献"></a>四、参考文献</h3><ol>
<li><a href="http://blog.csdn.net/ynnmnm/article/details/52253674" target="_blank" rel="noopener">Unity3D各平台Application.xxxPath的路径</a></li>
<li><a href="http://www.cnblogs.com/murongxiaopifu/p/4199541.html" target="_blank" rel="noopener">Unity3D移动平台动态读取外部文件全解析</a></li>
<li><a href="http://www.tuicool.com/articles/IN7RZfz" target="_blank" rel="noopener">Unity各种路径</a></li>
<li><a href="https://docs.unity3d.com/ScriptReference/Application.html" target="_blank" rel="noopener">Unity官方文档</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、Unity中的路径变量&quot;&gt;&lt;a href=&quot;#一、Unity中的路径变量&quot; class=&quot;headerlink&quot; title=&quot;一、Unity中的路径变量&quot;&gt;&lt;/a&gt;一、Unity中的路径变量&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Application.dataPath
    
    </summary>
    
      <category term="技术笔记" scheme="http://davidsheh.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Unity3D" scheme="http://davidsheh.github.io/tags/Unity3D/"/>
    
  </entry>
  
  <entry>
    <title>Unity插件之Unity调用C#编译的DLL</title>
    <link href="http://davidsheh.github.io/2016/11/15/Unity%E6%8F%92%E4%BB%B6%E4%B9%8BUnity%E8%B0%83%E7%94%A8C_Sharp%E7%BC%96%E8%AF%91%E7%9A%84DLL/"/>
    <id>http://davidsheh.github.io/2016/11/15/Unity插件之Unity调用C_Sharp编译的DLL/</id>
    <published>2016-11-15T05:58:02.000Z</published>
    <updated>2019-01-29T11:10:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>Unity插件分为两种：托管插件（Managed Plugins）和本地插件（Native Plugins）。本文先来说说Unity中的托管插件，本地插件的文章留到下一篇文章再说。<br>有时候我们会有这样的需求：给第三方公司提供Unity插件，而又不希望第三方看到具体代码，这时就可以将核心代码编译成dll文件供第三方调用。或者说，同一个公司多个项目都用到某个模块，则可以把该模块封装成dll，方便在不同项目之间共用和维护。</p>
<blockquote>
<p>关于dll加密的问题，以后有机会了可以考虑写点东西分享出来。</p>
</blockquote>
<p><strong>一、创建DLL</strong></p>
<hr>
<p>打开VS，选择文件 -&gt; 新建 -&gt; 项目后打开新建项目对话框。接着操作如下：</p>
<p><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/unity_csharp_dll_1.jpg" alt="新建项目.png"></p>
<p>点击确定后，编写如下代码：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">MyLib</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></div><div class="line">    &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GetBlogName</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">        </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"Sheh伟伟的个人博客"</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TimeSpan <span class="title">GetBlogTime</span>(<span class="params">DateTime time</span>)</span></div><div class="line"><span class="function">        </span>&#123;</div><div class="line">            <span class="keyword">return</span> (time - DateTime.Parse(<span class="string">"2016/11/14"</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后生成dll文件，操作如下图：</p>
<p><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/unity_csharp_dll_2.jpg" alt="build.png"></p>
<blockquote>
<p>提示：也可以用MonoDeveloper创建并生成dll，至于操作步骤可以查看<a href="https://docs.unity3d.com/Manual/UsingDLL.html" target="_blank" rel="noopener">官网手册</a>。</p>
</blockquote>
<p><strong>二、导入DLL</strong></p>
<hr>
<p>将MyLib项目目录下的bin/Debug目录下的MyLib.dll文件拷贝到Unity项目的Plugins目录下。这时，Unity控制台报Unhandled Exception: System.Reflection.ReflectionTypeLoadException: The classes in the module cannot be loaded的错误，报错详细信息如下：</p>
<p><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/unity_csharp_dll_3.jpg" alt="error.png"></p>
<p>这是因为我用的Unity版本是5.3.4f1，支持的.NET Framework的版本为3.5。而我创建的MyLib项目的默认.NET Framework 版本为4.5.2。<br>选择项目，然后右键选择属性 -&gt; 应用程序，将目标框架改为 .NET Framework 3.5或以下 ，如下图：</p>
<p><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/unity_csharp_dll_4.jpg" alt=""><br>接着重新生成一下dll文件，重新导入到Unity就行了。</p>
<p><strong>三、调用DLL</strong></p>
<hr>
<p>在Unity新建一个TestDll的脚本，并挂到主摄像机上，脚本代码如下：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> UnityEngine;</div><div class="line"><span class="keyword">using</span> System;</div><div class="line"><span class="keyword">using</span> MyLib; <span class="comment">// 导入dll</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestDll</span> : <span class="title">MonoBehaviour</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">string</span> blogUrl = <span class="string">"https://davidsheh.github.io/"</span>;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Start</span> (<span class="params"></span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">string</span> myBlog = <span class="keyword">string</span>.Format(<span class="string">"&#123;0&#125;:&#123;1&#125;"</span>, MyClass.GetBlogName(), blogUrl);</div><div class="line">        Debug.Log(myBlog);</div><div class="line"></div><div class="line">        TimeSpan span = MyClass.GetBlogTime(DateTime.Now);</div><div class="line">        Debug.Log(<span class="string">"写这篇博客到现在的时间间隔："</span> + span.TotalDays);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意，调用Dll中的方法一定要使用using语句引入导入到unity中的dll类库。</p>
<p><strong>四、导入Unity DLL</strong></p>
<hr>
<p>怎么导入Unity原生类库呢？别急，接下来就说说怎么在自定义的dll类库中调用Unity中的类。<br>首先选中项目，接着右键选择添加 -&gt; 引用后，弹出引用管理器，如下图：<br><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/unity_csharp_dll_5.jpg" alt="添加引用.png"></p>
<p>在应用管理器界面点击浏览按钮，找到UnityEngine.dll文件点击确认按钮导入，如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/unity_csharp_dll_6.jpg" alt="引用管理器.png"></p>
<blockquote>
<p>Unity类库在Mac上的路径为<code>Applications/Unity.app/Contents/Frameworks/Managed/UnityEngine.dll</code>；在Windows上的路径为<code>Program Files\Unity\Editor\Data\Managed\UnityEngine.dll</code>。</p>
</blockquote>
<p>接着，将项目中无用的类库都移除掉，只保留用到的System和UnityEngine两个类库，如下图：<br><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/unity_csharp_dll_7.jpg" alt="引用.png"></p>
<p>然后，修改MyClass脚本，代码如下：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System;</div><div class="line"><span class="keyword">using</span> UnityEngine;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">MyLib</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></div><div class="line">    &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GetBlogName</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">        </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"Sheh伟伟的个人博客"</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TimeSpan <span class="title">GetBlogTime</span>(<span class="params">DateTime time</span>)</span></div><div class="line"><span class="function">        </span>&#123;</div><div class="line">            <span class="keyword">return</span> (time - DateTime.Parse(<span class="string">"2016/11/13"</span>));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CreateCube</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">        </span>&#123;</div><div class="line">            GameObject go = GameObject.CreatePrimitive(PrimitiveType.Cube);</div><div class="line">            <span class="keyword">int</span> random = UnityEngine.Random.Range(<span class="number">-5</span>, <span class="number">5</span>);</div><div class="line">            go.transform.position = <span class="keyword">new</span> Vector3(random, random, <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码编写完成后，重新生成一下dll，然后导入到Unity中，接着修改Unity脚本TesDll，具体代码如下：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> UnityEngine;</div><div class="line"><span class="keyword">using</span> System;</div><div class="line"><span class="keyword">using</span> MyLib;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestDll</span> : <span class="title">MonoBehaviour</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">string</span> blogUrl = <span class="string">"https://davidsheh.github.io/"</span>;</div><div class="line">    <span class="keyword">string</span> myBlog;</div><div class="line">    <span class="keyword">double</span> time;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span> (<span class="params"></span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        myBlog = <span class="keyword">string</span>.Format(<span class="string">"&#123;0&#125;:&#123;1&#125;"</span>, MyClass.GetBlogName(), blogUrl);</div><div class="line">        Debug.Log(myBlog);</div><div class="line"></div><div class="line">        TimeSpan span = MyClass.GetBlogTime(DateTime.Now);</div><div class="line">        time = span.TotalDays;</div><div class="line">        Debug.Log(<span class="string">"写这篇博客到现在的时间间隔："</span> + time);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnGUI</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        GUILayout.Label(myBlog);</div><div class="line">        GUILayout.Label(time.ToString());</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(GUILayout.Button(<span class="string">"Create Cube"</span>))</div><div class="line">        &#123;</div><div class="line">            MyClass.CreateCube();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行后的效果图如下：<br><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/unity_csharp_dll_8.jpg" alt="效果图.png"></p>
<blockquote>
<p>源代码放在了群共享中，想要源码的可以加群：253999688</p>
</blockquote>
<p><strong>四、参考资料</strong></p>
<hr>
<p><a href="https://docs.unity3d.com/Manual/UsingDLL.html" target="_blank" rel="noopener">Managed Plugins</a></p>
<hr>
<blockquote>
<p>如果本文有错误之处还请帮忙指出。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Unity插件分为两种：托管插件（Managed Plugins）和本地插件（Native Plugins）。本文先来说说Unity中的托管插件，本地插件的文章留到下一篇文章再说。&lt;br&gt;有时候我们会有这样的需求：给第三方公司提供Unity插件，而又不希望第三方看到具体代码
    
    </summary>
    
      <category term="技术笔记" scheme="http://davidsheh.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Unity3D" scheme="http://davidsheh.github.io/tags/Unity3D/"/>
    
      <category term="C#" scheme="http://davidsheh.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>最好用的Unity版本控制工具</title>
    <link href="http://davidsheh.github.io/2016/11/03/%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84Unity%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/"/>
    <id>http://davidsheh.github.io/2016/11/03/最好用的Unity版本控制工具/</id>
    <published>2016-11-03T13:14:33.000Z</published>
    <updated>2019-01-29T11:10:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>自从来到现在的公司，负责Unity组开发以来，尝试了各种版本控制工具。从一开始的TortoiseSVN，到后来为了追求逼格使用Git，尝试了Github客户端和SourceTree，发现都有各种不爽。最后，发现还是Unity的亲儿子Asset Asset Server最好使，服务器配置傻瓜化，还集成到了Unity编辑器。</p>
<p><strong>一、Asset Server安装</strong></p>
<hr>
<p>去<a href="https://unity3d.com/cn/unity/team-license" target="_blank" rel="noopener">Unity官网</a>下载Unity资源服务器，如下图：</p>
<p><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/unity_assetserver_1.jpg" alt=""><br>Windows版下载后安装很简单，安装过程中会弹出的账号密码对话框，如下图：</p>
<p><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/unity_assetserver_2.jpg" alt=""><br>填写完账号密码后，会弹出控制面板，如下图：</p>
<p><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/unity_assetserver_3.jpg" alt=""><br>Asset Server启动起来了就可以关掉，程序会在后台继续运行。</p>
<p><strong>二、Asset Server配置</strong></p>
<hr>
<p>用Unity在服务器电脑上新建一个空的项目，然后选择Edit -&gt; Project Settings -&gt; Editor打开Editor Settings，Version Control项选择Asset Server，如下图：<br><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/unity_assetserver_4.jpg" alt=""></p>
<p>接着选择Window -&gt; Version Control打开Version Control，如下图：<br><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/unity_assetserver_5.jpg" alt=""></p>
<p>点击Administration按钮，然后在ServerAddress中输入localhost，接着输入用户名和密码，点击Connect。如下图：<br><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/unity_assetserver_6.jpg" alt=""></p>
<p>点击界面右边的Create按钮创建一个项目，然后就在Server视图的左下角会显示创建的项目。选中该项目，然后点击New User按钮创建允许访问的成员的信息，成员创建好了后，还必须勾选，没有勾选的不能访问该项目。如下图：<br><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/unity_assetserver_7.jpg" alt=""></p>
<p>到此，服务器配置就完成了。只要知道服务器的IP地址和Asset Server的用户名密码就可以在其他电脑上管理资源服务器。</p>
<p><strong>三、连接Asset Server</strong></p>
<hr>
<p>服务器配置完了，那么项目的其他成员如何连接服务器进行代码同步呢？<br>项目的其他成员可以在自己电脑上先建一个空项目，然后将Version Control也设置成Asset Server，接着选择Window -&gt; Version Control打开Server面板。点击Connection按钮，然后输入Server的IP地址和为改成员创建的用户名密码，点击Show Projects或者输入Project Name后，接着点击Connect，这样就连接上了服务器。如下图：<br><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/unity_assetserver_8.jpg" alt=""></p>
<p>时间紧迫，就写这么多吧，以后有必要再接着写代码的同步流程以及代码的对比工具。</p>
<p><strong>四、参考资料</strong></p>
<hr>
<ol>
<li><a href="https://docs.unity3d.com/Manual/SettinguptheAssetServer.html" target="_blank" rel="noopener">Setting up the Asset Server</a></li>
<li><a href="https://docs.unity3d.com/Manual/AssetServer.html" target="_blank" rel="noopener">Asset Server (Team License)</a></li>
</ol>
<blockquote>
<p>如果本文有错误之处还请帮忙指出。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从来到现在的公司，负责Unity组开发以来，尝试了各种版本控制工具。从一开始的TortoiseSVN，到后来为了追求逼格使用Git，尝试了Github客户端和SourceTree，发现都有各种不爽。最后，发现还是Unity的亲儿子Asset Asset Server最好使
    
    </summary>
    
      <category term="开发工具" scheme="http://davidsheh.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Unity3D" scheme="http://davidsheh.github.io/tags/Unity3D/"/>
    
  </entry>
  
  <entry>
    <title>如何用Github版本控制非Github库</title>
    <link href="http://davidsheh.github.io/2016/10/19/%E5%A6%82%E4%BD%95%E7%94%A8Github%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E9%9D%9EGithub%E5%BA%93/"/>
    <id>http://davidsheh.github.io/2016/10/19/如何用Github版本控制非Github库/</id>
    <published>2016-10-19T10:35:00.000Z</published>
    <updated>2019-01-29T11:10:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/github_logo.jpg" alt="GitHub Logo"></p>
<p>Git的图形化客户端有很多，不同的人可能习惯用不同的客户端。本人更习惯于Github的客户端，因为上Github比较多，同步代码到Github用官方的客户端是最方便的，所以也就更习惯于使用Github的客户端。最近，工作中要用Git进行项目的版本控制，为了迎合团队中喜欢使用图形界面的同事，我研究发现居然可以使用Github客户端同步代码到非Github代码库。</p>
<p><strong>一、Github安装</strong></p>
<hr>
<p>去<a href="https://desktop.github.com/" target="_blank" rel="noopener">Github官网</a>下载GitHub的客户端安装程序，安装的过程没啥好说的。</p>
<p><strong>二、同步远程仓库</strong></p>
<hr>
<p>客户端安装完后，Win 7桌面会产生GitHub和Git Shell两个图标。先打开Git Shell，然后在命令行使用<code>git clone</code>或者<code>git remote add origin</code>命令同步远程仓库。对Git命令不太熟悉的朋友可以参考我的另一篇文章<a href="http://www.jianshu.com/p/db3396474b96" target="_blank" rel="noopener">Git快速入门</a>.</p>
<p><strong>三、在Github客户端添加本地仓库</strong></p>
<hr>
<p>打开桌面的GitHub后，点击左上角的加号，选择Add选项，然后点Browse按钮找到本地仓库，最后Add repository。这样就把本地仓库添加到了Github客户端，就可以使用在客户端里进行Git的各种操作了。如果对Github不熟悉的朋友，可以看看知乎的<a href="https://www.zhihu.com/question/20070065" target="_blank" rel="noopener">怎样使用 GitHub</a>这个话题。</p>
<p><strong>四、Github客户端配置</strong></p>
<hr>
<p>点击Github窗口右上角的齿轮设置按钮，选择Repository settings后，在Ignored files的文本框中编写脚本忽略不想上传的文件。因为笔者从事Unity开发的工作，所以Ignore文件如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"># =============== #</div><div class="line"># Unity generated #</div><div class="line"># =============== #</div><div class="line">Temp/</div><div class="line">Library/</div><div class="line"></div><div class="line"># =============================================== #</div><div class="line"># Visual Studio / MonoDevelop / VS Code generated #</div><div class="line"># =============================================== #</div><div class="line">ExportedObj/</div><div class="line">obj/</div><div class="line">*.svd</div><div class="line">*.userprefs</div><div class="line">/*.csproj</div><div class="line">*.pidb</div><div class="line">*.suo</div><div class="line">/*.sln</div><div class="line">*.user</div><div class="line">*.unityproj</div><div class="line">*.booproj</div><div class="line">.vs/</div><div class="line">.vscode/</div><div class="line"></div><div class="line"># =============== #</div><div class="line"># Other generated #</div><div class="line"># =============== #</div><div class="line">.svn/</div><div class="line">*.apk</div><div class="line"></div><div class="line"># ============ #</div><div class="line"># OS generated #</div><div class="line"># ============ #</div><div class="line">.DS_Store</div><div class="line">.DS_Store?</div><div class="line">._*</div><div class="line">.Spotlight-V100</div><div class="line">.Trashes</div><div class="line">ehthumbs.db</div><div class="line">Thumbs.db</div></pre></td></tr></table></figure></p>
<p>然后，选择Remote选项，在输入框中填写远程仓库的SSH地址。最后记得点OK保存。</p>
<p><strong>五、Commit的日志格式</strong></p>
<hr>
<p>我把Commit的情况分成四种：add、del、mod、fix。add表示添加一个feature或者一个文件；del(delete)表示删除文件；mod(modify)表示修改文件；fix表示修复一个bug。Summary的格式是add xxx，Description中如果有多条可以分条列出。用add举个例子，格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">add xxx</div><div class="line">1. xxx</div><div class="line">2. xxx</div></pre></td></tr></table></figure></p>
<p><strong>六、学习资料推荐</strong></p>
<hr>
<ol>
<li><a href="http://stackoverflow.com/questions/2785640/optimizing-iphone-opengl-es-fill-rate" target="_blank" rel="noopener"><a href="http://stackoverflow.com/questions/18225126/how-to-use-git-for-unity-source-control" target="_blank" rel="noopener">How to use Git for Unity source control?</a></a></li>
<li><a href="https://github.com/NeuOL/neuola-legacy/wiki/Github%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97" target="_blank" rel="noopener">Github使用指南</a></li>
</ol>
<blockquote>
<p>如果本文有错误之处还请帮忙指出。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/github_logo.jpg&quot; alt=&quot;GitHub Logo&quot;&gt;&lt;/p&gt;
&lt;p&gt;Git的图形化
    
    </summary>
    
      <category term="开发工具" scheme="http://davidsheh.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Unity3D" scheme="http://davidsheh.github.io/tags/Unity3D/"/>
    
      <category term="GitHub" scheme="http://davidsheh.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>快速上手Unity原生Json库</title>
    <link href="http://davidsheh.github.io/2016/10/12/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8BUnity%E5%8E%9F%E7%94%9FJson%E5%BA%93/"/>
    <id>http://davidsheh.github.io/2016/10/12/快速上手Unity原生Json库/</id>
    <published>2016-10-12T02:47:55.000Z</published>
    <updated>2019-01-29T11:10:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在新版的Unity（印象中是从5.3开始）已经提供了原生的Json库，以前一直使用LitJson，研究了一下Unity用的JsonUtility工具类的使用，发现使用还挺方便的，所以打算把项目中的Json库换成Unity原生的。在Unity3D开发中Json有什么用呢？下面就来说说Json在Unity中的使用。</p>
<p><strong>一、Json有什么用？</strong></p>
<hr>
<p>Json在Unity中还是挺常用的一种数据格式的。那么，在Unity开发中哪些地方会用到Json呢？我相信没有太多编程经验的人肯定对这个问题比较感兴趣。在Unity中，有三种情况下会用到Json：</p>
<ol>
<li>跟服务器进行数据交互</li>
<li>配置文件</li>
<li>跟Android/iOS数据交互<br>目前这三种情况在我们项目中都用到了，搞明白了Json怎么用，这些都很简单，在这里就不赘述了，直接进入正题。</li>
</ol>
<p><strong>二、Json怎么用？</strong></p>
<hr>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> UnityEngine;</div><div class="line"><span class="keyword">using</span> System;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JsonExample</span> : <span class="title">MonoBehaviour</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="meta">#<span class="meta-keyword">region</span> 序列化</span></div><div class="line">        MyZone myZone = <span class="keyword">new</span> MyZone();</div><div class="line">        myZone.blogUrl = <span class="string">"https://davidsheh.github.io/"</span>;</div><div class="line">        myZone.blogName = <span class="string">"Sheh伟伟的个人博客"</span>;</div><div class="line"></div><div class="line">        Blog blog = <span class="keyword">new</span> Blog();</div><div class="line">        blog.url = <span class="string">"http://davidsheh.github.io/2016/10/12/快速上手Unity原生Json库/"</span>;</div><div class="line">        blog.name = <span class="string">"快速上手Unity原生Json库"</span>;</div><div class="line">        blog.time = DateTime.Now.ToString(<span class="string">"yyyy-MM-dd"</span>);</div><div class="line">        myZone.blog = blog;</div><div class="line"></div><div class="line">        <span class="keyword">string</span> json = JsonUtility.ToJson(myZone);</div><div class="line">        Debug.Log(json);</div><div class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></div><div class="line"></div><div class="line">        <span class="meta">#<span class="meta-keyword">region</span> 反序列化</span></div><div class="line">        <span class="keyword">string</span> blogStr = Resources.Load&lt;TextAsset&gt;(<span class="string">"MyZone"</span>).text;</div><div class="line">        myZone = JsonUtility.FromJson&lt;MyZone&gt;(blogStr);</div><div class="line">        Debug.Log(myZone.ToString());</div><div class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">[<span class="meta">Serializable</span>]</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyZone</span></div><div class="line">&#123;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 博客主页地址</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> blogUrl;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 博客名</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> blogName;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 本篇博客</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> Blog blog;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">string</span>.Format(<span class="string">"blogUrl:&#123;0&#125;, blogName:&#123;1&#125;, blog:&#123;2&#125;"</span>, blogUrl, blogName, blog.ToString());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">[<span class="meta">Serializable</span>]</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Blog</span></div><div class="line">&#123;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 文章名称</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> name;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 本篇博客链接</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> url;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> 博客发表时间</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> time;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">string</span>.Format(<span class="string">"&lt;name:&#123;0&#125;, url:&#123;1&#125;, time:&#123;2&#125;&gt;"</span>, name, url, time);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Json文件<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"blogUrl"</span>: <span class="string">"https://davidsheh.github.io/"</span>,</div><div class="line">  <span class="attr">"blogName"</span>: <span class="string">"Sheh伟伟的个人博客"</span>,</div><div class="line">  <span class="attr">"blog"</span>: </div><div class="line">  &#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"快速上手Unity原生Json库"</span>,</div><div class="line">    <span class="attr">"url"</span>: <span class="string">" http://davidsheh.github.io/2016/10/12/快速上手Unity原生Json库/"</span>,</div><div class="line">    <span class="attr">"time"</span>: <span class="string">"2016-09-27"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>三、性能怎么样？</strong></p>
<hr>
<p><a href="http://jacksondunstan.com/articles/3303" target="_blank" rel="noopener">More JSON Performance Benchmarks</a>这篇文章里详细对比分析了JsonUtility、LitJson和Newtonsoft.Json三种方式的序列化和反序列化的性能。<br>总的来说，JsonUtility在综合表现上要略胜一筹。</p>
<p><strong>四、注意事项</strong></p>
<hr>
<p>经过测试发现JsonUtility不支持序列化DateTime、Dictionary和Hashtable，其他类型暂时还没有测试，有兴趣的可以自行测试。</p>
<p><strong>五、参考资料</strong></p>
<hr>
<p><a href="https://docs.unity3d.com/ScriptReference/JsonUtility.html" target="_blank" rel="noopener">Unity API</a><br><a href="http://www.json.org/json-zh.html" target="_blank" rel="noopener">介绍 JSON</a></p>
<blockquote>
<p>如果本文有错误之处还请帮忙指出。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在新版的Unity（印象中是从5.3开始）已经提供了原生的Json库，以前一直使用LitJson，研究了一下Unity用的JsonUtility工具类的使用，发现使用还挺方便的，所以打算把项目中的Json库换成Unity原生的。在Unity3D开发中Json有什么用呢？下
    
    </summary>
    
      <category term="技术笔记" scheme="http://davidsheh.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Unity3D" scheme="http://davidsheh.github.io/tags/Unity3D/"/>
    
      <category term="Json" scheme="http://davidsheh.github.io/tags/Json/"/>
    
  </entry>
  
  <entry>
    <title>Git快速入门</title>
    <link href="http://davidsheh.github.io/2016/08/22/Git%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>http://davidsheh.github.io/2016/08/22/Git快速入门/</id>
    <published>2016-08-22T15:08:06.000Z</published>
    <updated>2019-01-29T11:10:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/git.jpg" alt="Git Logo"></p>
<p>如果你不想看长篇的Git教程，想快速了解Git的使用，那么本文可能会对你入门Git有所帮助。由于笔者用的是Windows系统，所以本文只写Git在Windows上的使用。</p>
<p><strong>一、Git安装</strong></p>
<hr>
<p>去<a href="https://git-scm.com/" target="_blank" rel="noopener">Git官网</a>下载Git的安装程序，安装的过程我就不多说了，没啥好说的。</p>
<p><strong>二、创建本地仓库</strong></p>
<hr>
<p>Git安装完成后有一个Git Bash，打开Git Bash。输入如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd d:</div><div class="line">mkdir learngit</div><div class="line">cd learngit</div></pre></td></tr></table></figure></p>
<p>上述命令表示切换到电脑D盘，然后创建一个learngit的文件夹并将目录切换到该文件夹下。不确定自己是否已切换到指定目录，可以使用<code>pwd</code>命令显示当前路径。<br>最后，输入<code>git init</code>命令创建并初始化版本库。初始化完后会在当前目录下生成一个<code>.git</code>的隐藏目录，一般情况下，Windows是默认隐藏带有隐藏属性的目录和文件的，但是可以通过设置让隐藏文件可见。使用<code>ls -ah</code>命令也可以直接看生成的<code>.git</code>目录</p>
<p><strong>三、提交文件</strong></p>
<hr>
<p>在learngit文件夹下新建一个README.txt的文本文件，然后内容输入<code>This is a README file.</code>。然后输入<code>git add README.txt</code>命令将文本文件添加进仓库，如果有多个文件，直接用空格隔开一次列出就可以了。接着使用<code>git commit -m &quot;add README file&quot;</code>提交操作。</p>
<p><strong>四、提交修改</strong></p>
<hr>
<p>修改README.txt文件，将文件内容中的<code>This</code>改为<code>It</code>，使用<code>git status</code>查看仓库状态，显示绿色的文件已修改的状态，表示添加修改成功，接着使用<code>git diff</code>查看修改的内容，然后使用<code>git add README.txt</code>添加修改。最后使用<code>git commit -m &quot;modify README file&quot;</code>提交修改。<br>如果想查看提交记录，则可以使用<code>git log</code>命令。</p>
<p><strong>五、创建SSH Key</strong></p>
<hr>
<p>在Git Bash中输入<code>cd ~/.ssh</code>命令查看根目录下有没有<code>.ssh</code>文件夹。如果能进入该文件夹，继续输入<code>ls</code>命令查看该目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可以不用创建SSH Key了。如果都没有，则用<code>cd ~</code>命令切回用户主目录，然后在Git Bash输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</div></pre></td></tr></table></figure></p>
<p>然后一路回车。完了，在用户主目录下会生成<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件。可以用<code>cat ~/.ssh/id_rsa</code>和<code>cat ~/.ssh/id_rsa.pub</code>查看文件的内容。</p>
<p><strong>六、在代码托管平台添加公钥</strong></p>
<hr>
<p>为了便于多人协作开发，一般我们会在远程服务器上建立一个远程仓库用来同步不同开发者的代码。这个远程仓库可以放在某一台电脑上，也可以直接使用第三方的代码托管平台。这里我们选择名气比较大的<a href="https://github.com" target="_blank" rel="noopener">GitHub</a>来做实验。<br>登陆你的GitHub帐户。然后点击头像 -&gt; Settings -&gt; 左边栏SSH and GPG Keys -&gt; New SSH key。然后复制上面<code>id_rsa.pub</code>文件中的内容，粘贴进Key文本域内。 Title域，随便填一个都行。<br>最后，使用<code>ssh -T git@github.com</code>命令来验证这个Key是不是正常工作。如果命令输入后，Key是正常工作的，则打印如下信息：<br><code>Hi username! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></p>
<blockquote>
<p>GitHub官方提供了一个非常好用的Git图形化客户端<a href="https://desktop.github.com/" target="_blank" rel="noopener">GitHub Desktop</a>。</p>
</blockquote>
<p><strong>七、关联远程仓库</strong></p>
<hr>
<ol>
<li>在GitHub<a href="https://github.com" target="_blank" rel="noopener">首页</a>，点击New repository创建一个仓库，具体创建步骤这里不做展开说明。</li>
<li>创建完成后，在该仓库的首页点击Clone or download-&gt;Use SSH-&gt;拷贝仓库SSH地址。我的创建的仓库地址是<code>git@github.com:DavidSheh/learngit.git</code></li>
<li>在Git Bash中切换到本地仓库目录，然后输入<code>git remote add origin git@github.com:DavidSheh/learngit.git</code>。实际操作时请将命令中的远程仓库SSH地址替换成你自己的。如果没有打印任何信息说明关联成功。</li>
<li>推送本地仓库内容到远程仓库。第一次推送master分支的所有内容可以使用<code>git push -u origin master</code>命令。成功后，以后每次有修改后，可以直接用<code>git push origin master</code>命令推送了。</li>
</ol>
<p><strong>八、克隆远程仓库</strong></p>
<hr>
<p>如果本地没有远程仓库的项目，想从远程仓库克隆一个仓库到本地应该怎么做呢？<br>其实很简单，只需要用<code>cd</code>命令切换到想要存放项目的路径，然后直接执行<code>git clone</code>命令就行了，注意命令后面跟的是项目的URL地址。项目在GitHub上的SSH和HTTPS地址均测试成功。<br>到此为止，Git的操作环境已经熟悉的差不多了，只要能成功的在GitHub上提交代码，那么在国内的代码托管平台（如<a href="https://code.csdn.net/" target="_blank" rel="noopener">CSDN Code平台</a>和<a href="https://ide.coding.net/" target="_blank" rel="noopener">Coding.Net</a>）托管代码也是很容易的事。</p>
<p><strong>九、Git 常用命令</strong></p>
<hr>
<p>熟悉了上面的操作后，通过举一反三，Git的其他操作都可以通过查命令文档来操作。下面附上一份常用的命令清单：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line">git init                                                  # 初始化本地git仓库（创建新仓库）</div><div class="line">git config --global user.name &quot;xxx&quot;                       # 配置用户名</div><div class="line">git config --global user.email &quot;xxx@xxx.com&quot;              # 配置邮件</div><div class="line">git config --global color.ui true                         # git status等命令自动着色</div><div class="line">git config --global color.status auto</div><div class="line">git config --global color.diff auto</div><div class="line">git config --global color.branch auto</div><div class="line">git config --global color.interactive auto</div><div class="line">git config --global --unset http.proxy                    # remove  proxy configuration on git</div><div class="line">git clone git+ssh://git@192.168.53.168/VT.git             # clone远程仓库</div><div class="line">git status                                                # 查看当前版本状态（是否修改）</div><div class="line">git add xyz                                               # 添加xyz文件至index</div><div class="line">git add .                                                 # 增加当前子目录下所有更改过的文件至index</div><div class="line">git commit -m &apos;xxx&apos;                                       # 提交</div><div class="line">git commit --amend -m &apos;xxx&apos;                               # 合并上一次提交（用于反复修改）</div><div class="line">git commit -am &apos;xxx&apos;                                      # 将add和commit合为一步</div><div class="line">git rm xxx                                                # 删除index中的文件</div><div class="line">git rm -r *                                               # 递归删除</div><div class="line">git log                                                   # 显示提交日志</div><div class="line">git log -1                                                # 显示1行日志 -n为n行</div><div class="line">git log -5</div><div class="line">git log --stat                                            # 显示提交日志及相关变动文件</div><div class="line">git log -p -m</div><div class="line">git show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容</div><div class="line">git show dfb02                                            # 可只用commitid的前几位</div><div class="line">git show HEAD                                             # 显示HEAD提交日志</div><div class="line">git show HEAD^                                            # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</div><div class="line">git tag                                                   # 显示已存在的tag</div><div class="line">git tag -a v2.0 -m &apos;xxx&apos;                                  # 增加v2.0的tag</div><div class="line">git show v2.0                                             # 显示v2.0的日志及详细内容</div><div class="line">git log v2.0                                              # 显示v2.0的日志</div><div class="line">git diff                                                  # 显示所有未添加至index的变更</div><div class="line">git diff --cached                                         # 显示所有已添加index但还未commit的变更</div><div class="line">git diff HEAD^                                            # 比较与上一个版本的差异</div><div class="line">git diff HEAD -- ./lib                                    # 比较与HEAD版本lib目录的差异</div><div class="line">git diff origin/master..master                            # 比较远程分支master上有本地分支master上没有的</div><div class="line">git diff origin/master..master --stat                     # 只显示差异的文件，不显示具体内容</div><div class="line">git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）</div><div class="line">git branch                                                # 显示本地分支</div><div class="line">git branch --contains 50089                               # 显示包含提交50089的分支</div><div class="line">git branch -a                                             # 显示所有分支</div><div class="line">git branch -r                                             # 显示所有原创分支</div><div class="line">git branch --merged                                       # 显示所有已合并到当前分支的分支</div><div class="line">git branch --no-merged                                    # 显示所有未合并到当前分支的分支</div><div class="line">git branch -m master master_copy                          # 本地分支改名</div><div class="line">git checkout -b master_copy                               # 从当前分支创建新分支master_copy并检出</div><div class="line">git checkout -b master master_copy                        # 上面的完整版</div><div class="line">git checkout features/performance                         # 检出已存在的features/performance分支</div><div class="line">git checkout --track hotfixes/BJVEP933                    # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</div><div class="line">git checkout v2.0                                         # 检出版本v2.0</div><div class="line">git checkout -b devel origin/develop                      # 从远程分支develop创建新本地分支devel并检出</div><div class="line">git checkout -- README                                    # 检出head版本的README文件（可用于修改错误回退）</div><div class="line">git merge origin/master                                   # 合并远程master分支至当前分支</div><div class="line">git cherry-pick ff44785404a8e                             # 合并提交ff44785404a8e的修改</div><div class="line">git push origin master                                    # 将当前分支push到远程master分支</div><div class="line">git push origin :hotfixes/BJVEP933                        # 删除远程仓库的hotfixes/BJVEP933分支</div><div class="line">git push --tags                                           # 把所有tag推送到远程仓库</div><div class="line">git fetch                                                 # 获取所有远程分支（不更新本地分支，另需merge）</div><div class="line">git fetch --prune                                         # 获取所有原创分支并清除服务器上已删掉的分支</div><div class="line">git pull origin master                                    # 获取远程分支master并merge到当前分支</div><div class="line">git mv README README2                                     # 重命名文件README为README2</div><div class="line">git reset --hard HEAD                                     # 将当前版本重置为HEAD（通常用于merge失败回退）</div><div class="line">git rebase</div><div class="line">git branch -d hotfixes/BJVEP933                           # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</div><div class="line">git branch -D hotfixes/BJVEP933                           # 强制删除分支hotfixes/BJVEP933</div><div class="line">git ls-files                                              # 列出git index包含的文件</div><div class="line">git show-branch                                           # 图示当前分支历史</div><div class="line">git show-branch --all                                     # 图示所有分支历史</div><div class="line">git whatchanged                                           # 显示提交历史对应的文件修改</div><div class="line">git revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818</div><div class="line">git ls-tree HEAD                                          # 内部命令：显示某个git对象</div><div class="line">git rev-parse v2.0                                        # 内部命令：显示某个ref对于的SHA1 HASH</div><div class="line">git reflog                                                # 显示所有提交，包括孤立节点</div><div class="line">git show HEAD@&#123;5&#125;</div><div class="line">git show master@&#123;yesterday&#125;                               # 显示master分支昨天的状态</div><div class="line">git log --pretty=format:&apos;%h %s&apos; --graph                   # 图示提交日志</div><div class="line">git show HEAD~3</div><div class="line">git show -s --pretty=raw 2be7fcb476</div><div class="line">git stash                                                 # 暂存当前修改，将所有至为HEAD状态</div><div class="line">git stash list                                            # 查看所有暂存</div><div class="line">git stash show -p stash@&#123;0&#125;                               # 参考第一次暂存</div><div class="line">git stash apply stash@&#123;0&#125;                                 # 应用第一次暂存</div><div class="line">git grep &quot;delete from&quot;                                    # 文件中搜索文本“delete from”</div><div class="line">git grep -e &apos;#define&apos; --and -e SORT_DIRENT</div><div class="line">git gc</div><div class="line">git fsck</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>十、参考资料</strong></p>
<ol>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰Git教程</a></li>
<li><a href="https://gist.github.com/guweigang/9848271" target="_blank" rel="noopener">Git命令大全</a></li>
<li>这里还有两篇整理得不错的介绍Git常用命令的文章也介绍个大家：<ul>
<li>阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">常用 Git 命令清单</a></li>
<li><a href="http://robbinfan.com/blog/34/git-common-command" target="_blank" rel="noopener">Git常用命令备忘</a></li>
</ul>
</li>
</ol>
<blockquote>
<p>本文是笔者的学习记录，分享给大家，如有错误之处请多多指教。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/git.jpg&quot; alt=&quot;Git Logo&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果你不想看长篇的Git教程，想快速
    
    </summary>
    
      <category term="技术笔记" scheme="http://davidsheh.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Git" scheme="http://davidsheh.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>「Modern OpenGL系列（四）」在OpenGL中使用Shader</title>
    <link href="http://davidsheh.github.io/2016/05/08/%E3%80%8CModern%20OpenGL%E7%B3%BB%E5%88%97%EF%BC%88%E5%9B%9B%EF%BC%89%E3%80%8D%E5%9C%A8OpenGL%E4%B8%AD%E4%BD%BF%E7%94%A8Shader/"/>
    <id>http://davidsheh.github.io/2016/05/08/「Modern OpenGL系列（四）」在OpenGL中使用Shader/</id>
    <published>2016-05-08T12:19:28.000Z</published>
    <updated>2019-01-29T11:10:13.000Z</updated>
    
    <content type="html"><![CDATA[<p> 在<a href="http://davidsheh.github.io/2016/05/08/「Modern OpenGL系列（三）」用OpenGL绘制一个三角形/">上一篇文章</a>中已经介绍了OpenGL窗口的创建。本文接着说如何用OpenGL绘制一个三角形。<br>1 . 添加头文件<code>shader.h</code>，代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL\glew.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shader</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">	Shader(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; fileName);</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Bind</span><span class="params">()</span></span>;</div><div class="line">	</div><div class="line">	<span class="keyword">virtual</span> ~Shader();</div><div class="line"><span class="keyword">protected</span>:</div><div class="line"><span class="keyword">private</span>:</div><div class="line">	<span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NUM_SHADERS = <span class="number">2</span>;</div><div class="line">	Shader(<span class="keyword">const</span> Shader&amp; other)&#123;&#125;</div><div class="line">	<span class="keyword">void</span> <span class="keyword">operator</span>=(<span class="keyword">const</span> Shader&amp; other)&#123;&#125;</div><div class="line"></div><div class="line">	GLuint m_program;</div><div class="line">	GLuint m_shaders[NUM_SHADERS];</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>2 . 添加类<code>shader.cpp</code>，代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"shader.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CheckShaderError</span><span class="params">(GLuint shader, GLuint flag, <span class="keyword">bool</span> isProgram, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; errorMessage)</span></span>;</div><div class="line"><span class="keyword">static</span> <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">LoadShader</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; fileName)</span></span>;</div><div class="line"><span class="function"><span class="keyword">static</span> GLuint <span class="title">CreateShader</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; text, GLenum shaderType)</span></span>;</div><div class="line"></div><div class="line">Shader::Shader(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; fileName)</div><div class="line">&#123;</div><div class="line">	m_program = glCreateProgram();</div><div class="line">	m_shaders[<span class="number">0</span>] = CreateShader(LoadShader(fileName + <span class="string">".vs"</span>), GL_VERTEX_SHADER);</div><div class="line">	m_shaders[<span class="number">1</span>] = CreateShader(LoadShader(fileName + <span class="string">".fs"</span>), GL_FRAGMENT_SHADER);</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NUM_SHADERS; i++)</div><div class="line">	&#123;</div><div class="line">		glAttachShader(m_program, m_shaders[i]);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//glBindAttribLocation(m_program, 0, "position");</span></div><div class="line"></div><div class="line">	glLinkProgram(m_program);</div><div class="line">	CheckShaderError(m_program, GL_LINK_STATUS, <span class="literal">true</span>, <span class="string">"Error: Program linking failed!"</span>);</div><div class="line"></div><div class="line">	glValidateProgram(m_program);</div><div class="line">	CheckShaderError(m_program, GL_VALIDATE_STATUS, <span class="literal">true</span>, <span class="string">"Error: Program invalid!"</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">Shader::~Shader()</div><div class="line">&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NUM_SHADERS; i++)</div><div class="line">	&#123;</div><div class="line">		glDetachShader(m_program, m_shaders[i]);</div><div class="line">		glDeleteShader(m_shaders[i]);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	glDeleteProgram(m_program);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Shader::Bind()</div><div class="line">&#123;</div><div class="line">	glUseProgram(m_program);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> GLuint <span class="title">CreateShader</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; text, GLenum shaderType)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	GLuint shader = glCreateShader(shaderType);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (shader == <span class="number">0</span>)</div><div class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"Error: Shader creation failed!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">	<span class="keyword">const</span> GLchar* shaderSourceStrings[<span class="number">1</span>];</div><div class="line">	GLint shaderSourceStringLengths[<span class="number">1</span>];</div><div class="line"></div><div class="line">	shaderSourceStrings[<span class="number">0</span>] = text.c_str();</div><div class="line"></div><div class="line">	glShaderSource(shader, <span class="number">1</span>, shaderSourceStrings, shaderSourceStringLengths);</div><div class="line">	glCompileShader(shader);</div><div class="line"></div><div class="line">	CheckShaderError(shader, GL_COMPILE_STATUS, <span class="literal">false</span>, <span class="string">"Error: Shader compilation failed!"</span>);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> shader;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">LoadShader</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; fileName)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="built_in">std</span>::ifstream file;</div><div class="line">	file.open((fileName).c_str());</div><div class="line"></div><div class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> output;</div><div class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> line;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (file.is_open())</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">while</span> (file.good())</div><div class="line">		&#123;</div><div class="line">			getline(file, line);</div><div class="line">			output.append(line + <span class="string">"\n"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"Unable to load shader: "</span> &lt;&lt; fileName &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> output;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CheckShaderError</span><span class="params">(GLuint shader, GLuint flag, <span class="keyword">bool</span> isProgram, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; errorMessage)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	GLint success = <span class="number">0</span>;</div><div class="line">	GLchar error[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (isProgram)</div><div class="line">		glGetProgramiv(shader, flag, &amp;success);</div><div class="line">	<span class="keyword">else</span></div><div class="line">		glGetShaderiv(shader, flag, &amp;success);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (success == GL_FALSE)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (isProgram)</div><div class="line">			glGetProgramInfoLog(shader, <span class="keyword">sizeof</span>(error), <span class="literal">NULL</span>, error);</div><div class="line">		<span class="keyword">else</span></div><div class="line">			glGetShaderInfoLog(shader, <span class="keyword">sizeof</span>(error), <span class="literal">NULL</span>, error);</div><div class="line"></div><div class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; errorMessage &lt;&lt; <span class="string">": '"</span> &lt;&lt; error &lt;&lt; <span class="string">"'"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3 . 在项目文件夹下新建<code>res</code>文件夹，如下图：<img src="http://img.blog.csdn.net/20160508204145889" alt="这里写图片描述"><br>4 . 在新建的<code>res</code>文件夹下，新建顶点着色器文件<code>basicShader.vs</code>，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#version 120</div><div class="line"></div><div class="line">attribute vec3 position;</div><div class="line"></div><div class="line">void main()</div><div class="line">&#123;</div><div class="line">	gl_Position = vec4(position, 1.0);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>5 . 在新建的<code>res</code>文件夹下，新建片元着色器文件<code>basicShader.fs</code>，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#version 120</div><div class="line"></div><div class="line">attribute vec3 position;</div><div class="line"></div><div class="line">void main()</div><div class="line">&#123;</div><div class="line">	gl_Position = vec4(position, 1.0);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>6 . 修改主类<code>main.cpp</code>，代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL\glew.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"display.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mesh.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"shader.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="comment">// 设置窗体大小和标题</span></div><div class="line">	<span class="function">Display <span class="title">display</span><span class="params">(<span class="number">400</span>, <span class="number">300</span>, <span class="string">"hello world!"</span>)</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">// 设置三角形顶点</span></div><div class="line">	Vertex vertices[] = &#123; Vertex(glm::vec3(<span class="number">-0.5</span>, <span class="number">-0.5</span>, <span class="number">0</span>)), Vertex(glm::vec3(<span class="number">0</span>, <span class="number">0.5</span>, <span class="number">0</span>)), Vertex(glm::vec3(<span class="number">0.5</span>, <span class="number">-0.5</span>, <span class="number">0</span>)), &#125;;</div><div class="line"></div><div class="line">	<span class="comment">// 生成网格</span></div><div class="line">	Mesh mesh(vertices, sizeof(vertices) / sizeof(vertices[0]));</div><div class="line">	<span class="comment">// 加载着色器</span></div><div class="line">	<span class="function">Shader <span class="title">shader</span><span class="params">(<span class="string">"./res/basicShader"</span>)</span></span>;</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (!display.IsClosed())</div><div class="line">	&#123;</div><div class="line">		display.Clear(<span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 绑定着色器</span></div><div class="line">		shader.Bind();</div><div class="line">		<span class="comment">// 绘制三角形</span></div><div class="line">		mesh.Draw();	</div><div class="line"></div><div class="line">		display.Update();<span class="comment">// 刷新</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>7 . 运行项目。运行后会显示一个绿色的OpenGL窗口中有一个红色三角形。如图：<br><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/morden_opengl_8.png" alt="效果图"></p>
<p><strong>注意：</strong>本文中的项目使用的是VS2015，建议是用VS2015打开。<a href="http://download.csdn.net/detail/wenxin2011/9513816" target="_blank" rel="noopener"><strong>点此下载源码</strong></a></p>
<blockquote>
<p>本文整理自YouTube视频教程<a href="https://www.youtube.com/watch?v=csKrVBWCItc&amp;index=7&amp;list=PLEETnX-uPtBXT9T-hD0Bj31DSnwio-ywh" target="_blank" rel="noopener">#3.5 Intro to Modern OpenGL Tutorial: Shaders</a></p>
</blockquote>
<hr>
<p><strong>同系列文章</strong></p>
<p><a href="http://davidsheh.github.io/2016/05/01/「Modern OpenGL系列（一）」十步搞定OpenGL开发环境/">「Modern OpenGL系列（一）」十步搞定OpenGL开发环境</a></p>
<p><a href="http://davidsheh.github.io/2016/05/02/「Modern OpenGL系列（二）」创建OpenGL窗口/">「Modern OpenGL系列（二）」创建OpenGL窗口</a></p>
<p><a href="http://davidsheh.github.io/2016/05/08/「Modern OpenGL系列（三）」用OpenGL绘制一个三角形/">「Modern OpenGL系列（三）」用OpenGL绘制一个三角形</a></p>
<p><a href="http://davidsheh.github.io/2016/05/08/「Modern OpenGL系列（四）」在OpenGL中使用Shader/">「Modern OpenGL系列（四）」在OpenGL中使用Shader</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 在&lt;a href=&quot;http://davidsheh.github.io/2016/05/08/「Modern OpenGL系列（三）」用OpenGL绘制一个三角形/&quot;&gt;上一篇文章&lt;/a&gt;中已经介绍了OpenGL窗口的创建。本文接着说如何用OpenGL绘制一个三角形。&lt;b
    
    </summary>
    
      <category term="技术笔记" scheme="http://davidsheh.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="OpenGL" scheme="http://davidsheh.github.io/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>「Modern OpenGL系列（三）」用OpenGL绘制一个三角形</title>
    <link href="http://davidsheh.github.io/2016/05/08/%E3%80%8CModern%20OpenGL%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89%E3%80%8D%E7%94%A8OpenGL%E7%BB%98%E5%88%B6%E4%B8%80%E4%B8%AA%E4%B8%89%E8%A7%92%E5%BD%A2/"/>
    <id>http://davidsheh.github.io/2016/05/08/「Modern OpenGL系列（三）」用OpenGL绘制一个三角形/</id>
    <published>2016-05-08T10:42:52.000Z</published>
    <updated>2019-01-29T11:10:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="http://davidsheh.github.io/2016/05/02/「Modern OpenGL系列（二）」创建OpenGL窗口/">上一篇文章</a>中已经介绍了OpenGL窗口的创建。本文接着说如何用OpenGL绘制一个三角形。<br>1 . 添加头文件<code>mesh.h</code>，代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;glm\glm.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL\glew.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vertex</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">	Vertex(<span class="keyword">const</span> glm::vec3&amp; pos)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>-&gt;pos = pos;</div><div class="line">	&#125;</div><div class="line"><span class="keyword">protected</span>:</div><div class="line"><span class="keyword">private</span>:</div><div class="line">	glm::vec3 pos;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mesh</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">	Mesh(Vertex* vertices, <span class="keyword">unsigned</span> <span class="keyword">int</span> numVertices);</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Draw</span><span class="params">()</span></span>;</div><div class="line">	</div><div class="line">	<span class="keyword">virtual</span> ~Mesh();</div><div class="line"></div><div class="line"><span class="keyword">protected</span>:</div><div class="line"><span class="keyword">private</span>:</div><div class="line">	Mesh(<span class="keyword">const</span> Mesh&amp; other);</div><div class="line">	<span class="keyword">void</span> <span class="keyword">operator</span>=(<span class="keyword">const</span> Mesh&amp; other);</div><div class="line"></div><div class="line">	<span class="keyword">enum</span></div><div class="line">	&#123;</div><div class="line">		POSITION_VB,</div><div class="line">		NUM_BUFFERS</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	GLuint m_vertexArrayObject;</div><div class="line">	GLuint m_vertexArrayBuffers[NUM_BUFFERS];</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> m_drawCount;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>2 . 添加类<code>mesh.cpp</code>，代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mesh.h"</span></span></div><div class="line"></div><div class="line">Mesh::Mesh(Vertex* vertices, <span class="keyword">unsigned</span> <span class="keyword">int</span> numVertices)</div><div class="line">&#123;</div><div class="line">	m_drawCount = numVertices;</div><div class="line"></div><div class="line">	glGenVertexArrays(<span class="number">1</span>, &amp;m_vertexArrayObject);</div><div class="line">	glBindVertexArray(m_vertexArrayObject);</div><div class="line"></div><div class="line">	glGenBuffers(NUM_BUFFERS, m_vertexArrayBuffers);</div><div class="line">	glBindBuffer(GL_ARRAY_BUFFER, m_vertexArrayBuffers[POSITION_VB]);</div><div class="line">	glBufferData(GL_ARRAY_BUFFER, numVertices * <span class="keyword">sizeof</span>(vertices[<span class="number">0</span>]),  vertices, GL_STATIC_DRAW);</div><div class="line">	</div><div class="line">	glEnableVertexAttribArray(<span class="number">0</span>);</div><div class="line">	glVertexAttribPointer(<span class="number">0</span>, <span class="number">3</span>, GL_FLOAT, GL_FALSE, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">	glBindVertexArray(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Mesh::~Mesh()</div><div class="line">&#123;</div><div class="line">	glDeleteVertexArrays(<span class="number">1</span>, &amp;m_vertexArrayObject);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Mesh::Draw()</div><div class="line">&#123;</div><div class="line">	glBindVertexArray(m_vertexArrayObject);</div><div class="line">	glDrawArrays(GL_TRIANGLES, <span class="number">0</span>, m_drawCount);</div><div class="line"></div><div class="line">	glBindVertexArray(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3 . 修改主类<code>main.cpp</code>，代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL\glew.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"display.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mesh.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="comment">// 设置窗体大小和标题</span></div><div class="line">	<span class="function">Display <span class="title">display</span><span class="params">(<span class="number">400</span>, <span class="number">300</span>, <span class="string">"hello world!"</span>)</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">// 设置三角形顶点</span></div><div class="line">	Vertex vertices[] = &#123; Vertex(glm::vec3(<span class="number">-0.5</span>, <span class="number">-0.5</span>, <span class="number">0</span>)), Vertex(glm::vec3(<span class="number">0</span>, <span class="number">0.5</span>, <span class="number">0</span>)), Vertex(glm::vec3(<span class="number">0.5</span>, <span class="number">-0.5</span>, <span class="number">0</span>)), &#125;;</div><div class="line"></div><div class="line">	<span class="comment">// 生成网格</span></div><div class="line">	Mesh mesh(vertices, sizeof(vertices) / sizeof(vertices[0]));</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (!display.IsClosed())</div><div class="line">	&#123;</div><div class="line">		display.Clear(<span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 绘制三角形</span></div><div class="line">		mesh.Draw();	</div><div class="line"></div><div class="line">		display.Update();<span class="comment">// 刷新</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>本文整理自YouTube视频教程<a href="https://www.youtube.com/watch?v=0jML5fMBDGg&amp;index=8&amp;list=PLEETnX-uPtBXT9T-hD0Bj31DSnwio-ywh" target="_blank" rel="noopener">#3.5 Intro to Modern OpenGL Tutorial: Meshes</a></p>
</blockquote>
<hr>
<p><strong>同系列文章</strong></p>
<p><a href="http://davidsheh.github.io/2016/05/01/「Modern OpenGL系列（一）」十步搞定OpenGL开发环境/">「Modern OpenGL系列（一）」十步搞定OpenGL开发环境</a></p>
<p><a href="http://davidsheh.github.io/2016/05/02/「Modern OpenGL系列（二）」创建OpenGL窗口/">「Modern OpenGL系列（二）」创建OpenGL窗口</a></p>
<p><a href="http://davidsheh.github.io/2016/05/08/「Modern OpenGL系列（三）」用OpenGL绘制一个三角形/">「Modern OpenGL系列（三）」用OpenGL绘制一个三角形</a></p>
<p><a href="http://davidsheh.github.io/2016/05/08/「Modern OpenGL系列（四）」在OpenGL中使用Shader/">「Modern OpenGL系列（四）」在OpenGL中使用Shader</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;http://davidsheh.github.io/2016/05/02/「Modern OpenGL系列（二）」创建OpenGL窗口/&quot;&gt;上一篇文章&lt;/a&gt;中已经介绍了OpenGL窗口的创建。本文接着说如何用OpenGL绘制一个三角形。&lt;br&gt;1 .
    
    </summary>
    
      <category term="技术笔记" scheme="http://davidsheh.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="OpenGL" scheme="http://davidsheh.github.io/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>「Modern OpenGL系列（二）」创建OpenGL窗口</title>
    <link href="http://davidsheh.github.io/2016/05/02/%E3%80%8CModern%20OpenGL%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89%E3%80%8D%E5%88%9B%E5%BB%BAOpenGL%E7%AA%97%E5%8F%A3/"/>
    <id>http://davidsheh.github.io/2016/05/02/「Modern OpenGL系列（二）」创建OpenGL窗口/</id>
    <published>2016-05-02T03:29:11.000Z</published>
    <updated>2019-01-29T11:10:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>在博主的<a href="http://davidsheh.github.io/2016/05/01/「Modern OpenGL系列（一）」十步搞定OpenGL开发环境/">上一篇文章</a>中已经介绍了OpenGL开发环境的搭建，本篇博文将验证开发环境是否搭建成功。同时，也是迈出OpenGL开发的第一步。我们使用上一篇文章中新建的项目，创建一个OpenGL窗口。</p>
<ol>
<li><p>添加头文件<code>display.h</code>。</p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;SDL2\SDL.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Display</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">	Display(<span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; title);</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Clear</span><span class="params">(<span class="keyword">float</span> r, <span class="keyword">float</span> g, <span class="keyword">float</span> b, <span class="keyword">float</span> a)</span></span>;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">IsClosed</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="keyword">virtual</span> ~Display();</div><div class="line"></div><div class="line"><span class="keyword">protected</span>:</div><div class="line"><span class="keyword">private</span>:</div><div class="line">	Display(<span class="keyword">const</span> Display&amp; other) &#123;&#125;</div><div class="line">	Display&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Display&amp; other) &#123;&#125;</div><div class="line"></div><div class="line">	SDL_Window* m_window;</div><div class="line">	SDL_GLContext m_glContext;</div><div class="line">	<span class="keyword">bool</span> m_isClosed;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>添加显示类<code>display.cpp</code>.</p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"display.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL\glew.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line">Display::Display(<span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; title)</div><div class="line">&#123;</div><div class="line">	SDL_Init(SDL_INIT_EVERYTHING);</div><div class="line"></div><div class="line">	SDL_GL_SetAttribute(SDL_GL_RED_SIZE, <span class="number">8</span>);</div><div class="line">	SDL_GL_SetAttribute(SDL_GL_GREEN_SIZE, <span class="number">8</span>);</div><div class="line">	SDL_GL_SetAttribute(SDL_GL_BLUE_SIZE, <span class="number">8</span>);</div><div class="line">	SDL_GL_SetAttribute(SDL_GL_ALPHA_SIZE, <span class="number">8</span>);<span class="comment">// 设置颜色的四个分量所占用内存为8bit</span></div><div class="line">	SDL_GL_SetAttribute(SDL_GL_BUFFER_SIZE, <span class="number">32</span>);</div><div class="line">	SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, <span class="number">1</span>);</div><div class="line"></div><div class="line">	m_window = SDL_CreateWindow(title.c_str(), SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, width, height, SDL_WINDOW_OPENGL);</div><div class="line">	m_glContext = SDL_GL_CreateContext(m_window);</div><div class="line"></div><div class="line">	GLenum status = glewInit();</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (status != GLEW_OK)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"Glew failed to initialize"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	m_isClosed = <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Display::~Display()</div><div class="line">&#123;</div><div class="line">	SDL_GL_DeleteContext(m_glContext);</div><div class="line">	SDL_DestroyWindow(m_window);</div><div class="line">	SDL_Quit();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Display::Clear(<span class="keyword">float</span> r, <span class="keyword">float</span> g, <span class="keyword">float</span> b, <span class="keyword">float</span> a)</div><div class="line">&#123;</div><div class="line">	glClearColor(r, g, b, a);<span class="comment">// 设置窗口背景色</span></div><div class="line">	glClear(GL_COLOR_BUFFER_BIT);<span class="comment">// 清除颜色缓冲</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> Display::IsClosed()</div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> m_isClosed;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Display::Update()</div><div class="line">&#123;</div><div class="line">	SDL_GL_SwapWindow(m_window);</div><div class="line"></div><div class="line">	SDL_Event e;</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (SDL_PollEvent(&amp;e))</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (e.type == SDL_QUIT)</div><div class="line">		&#123;</div><div class="line">			m_isClosed = <span class="literal">true</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在<code>main</code>函数中调用显示方法。具体代码如下：</p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL\glew.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"display.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="function">Display <span class="title">display</span><span class="params">(<span class="number">400</span>, <span class="number">300</span>, <span class="string">"hello world!"</span>)</span></span>;</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (!display.IsClosed())</div><div class="line">	&#123;</div><div class="line">		display.Clear(<span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>);</div><div class="line"></div><div class="line">		display.Update();<span class="comment">// 刷新</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>运行项目。可以使用快捷键<code>F5</code>来运行项目。运行后会显示一个绿色的OpenGL窗口。如图：<img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/morden_opengl_7.png" alt="效果图"></p>
</li>
</ol>
<p><strong>注意：</strong> </p>
<ol>
<li><p>如果<code>main</code>方法没有参数，则会报错：<code>SDL2main.lib(SDL_windows_main.obj) : error LNK2019: 无法解析的外部符号 _SDL_main，该符号在函数 _main_utf8 中被引用</code>，所以<code>main</code>方法的签名必须是<code>int main(int argc, char** argv)</code>。</p>
</li>
<li><p>本文中的项目使用的是VS2015，建议是用VS2015打开。</p>
</li>
<li><p>源码下载。<a href="http://download.csdn.net/detail/wenxin2011/9507987" target="_blank" rel="noopener"><strong>点此下载源码</strong></a></p>
</li>
</ol>
<blockquote>
<p>本文整理自YouTube视频教程<a href="https://www.youtube.com/watch?v=DkiKgQRiMRU&amp;index=5&amp;list=PLEETnX-uPtBXT9T-hD0Bj31DSnwio-ywh" target="_blank" rel="noopener">#2 Intro to Modern OpenGL Tutorial: OpenGL Windows</a></p>
</blockquote>
<hr>
<p><strong>同系列文章</strong></p>
<p><a href="http://davidsheh.github.io/2016/05/01/「Modern OpenGL系列（一）」十步搞定OpenGL开发环境/">「Modern OpenGL系列（一）」十步搞定OpenGL开发环境</a></p>
<p><a href="http://davidsheh.github.io/2016/05/02/「Modern OpenGL系列（二）」创建OpenGL窗口/">「Modern OpenGL系列（二）」创建OpenGL窗口</a></p>
<p><a href="http://davidsheh.github.io/2016/05/08/「Modern OpenGL系列（三）」用OpenGL绘制一个三角形/">「Modern OpenGL系列（三）」用OpenGL绘制一个三角形</a></p>
<p><a href="http://davidsheh.github.io/2016/05/08/「Modern OpenGL系列（四）」在OpenGL中使用Shader/">「Modern OpenGL系列（四）」在OpenGL中使用Shader</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在博主的&lt;a href=&quot;http://davidsheh.github.io/2016/05/01/「Modern OpenGL系列（一）」十步搞定OpenGL开发环境/&quot;&gt;上一篇文章&lt;/a&gt;中已经介绍了OpenGL开发环境的搭建，本篇博文将验证开发环境是否搭建成功。同时
    
    </summary>
    
      <category term="技术笔记" scheme="http://davidsheh.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="OpenGL" scheme="http://davidsheh.github.io/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>「Modern OpenGL系列（一）」十步搞定OpenGL开发环境</title>
    <link href="http://davidsheh.github.io/2016/05/01/%E3%80%8CModern%20OpenGL%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%E3%80%8D%E5%8D%81%E6%AD%A5%E6%90%9E%E5%AE%9AOpenGL%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://davidsheh.github.io/2016/05/01/「Modern OpenGL系列（一）」十步搞定OpenGL开发环境/</id>
    <published>2016-05-01T14:36:43.000Z</published>
    <updated>2019-01-29T11:10:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>OpenGL官网：<a href="https://www.opengl.org。" target="_blank" rel="noopener">https://www.opengl.org。</a><br>开发常用的SDK库：<a href="https://www.opengl.org/sdk/libs/" target="_blank" rel="noopener">https://www.opengl.org/sdk/libs/</a></p>
<h3 id="搭建环境前的准备"><a href="#搭建环境前的准备" class="headerlink" title="搭建环境前的准备"></a>搭建环境前的准备</h3><p>在搭建OpenGL开发环境前先下载好下面的三个压缩文件：</p>
<ol>
<li>GLEW（OpenGL Extension Wrangler Library）：<a href="http://glew.sourceforge.net/" target="_blank" rel="noopener">详细介绍</a>。压缩包下载链接：<a href="http://glew.sourceforge.net/" target="_blank" rel="noopener">Binaries        Windows 32-bit and 64-bit</a></li>
<li>GLM（OpenGL Mathematics）：<a href="http://glm.g-truc.net/0.9.7/index.html" target="_blank" rel="noopener">详细介绍</a>。压缩包下载链接：<a href="https://github.com/g-truc/glm/releases/download/0.9.7.4/glm-0.9.7.4.zip" target="_blank" rel="noopener">glm-0.9.7.4.zip</a></li>
<li>SDL（Simple DirectMedia Layer）：<a href="https://www.libsdl.org/" target="_blank" rel="noopener">详细介绍</a>。压缩包下载链接：<a href="https://www.libsdl.org/release/SDL2-devel-2.0.4-VC.zip" target="_blank" rel="noopener">SDL2-devel-2.0.4-VC.zip</a> (Visual C++ 32/64-bit)</li>
</ol>
<blockquote>
<p>上面的三个库文件我已经上传到<a href="http://download.csdn.net/detail/wenxin2011/9507933" target="_blank" rel="noopener">我的CSDN资源</a>中，有需要的可自行下载。</p>
</blockquote>
<h3 id="创建VS项目"><a href="#创建VS项目" class="headerlink" title="创建VS项目"></a>创建VS项目</h3><ol>
<li>打开VS2015，文件-&gt;新建-&gt;项目（或者使用快捷键<code>Ctrl+Shift+N</code>）。然后选择<code>Visual C++</code> -&gt; Win32项目。如下图所示：<img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/morden_opengl_1.png" alt="新建项目"></li>
<li>点<code>确定</code>按钮后，接着点<code>下一步</code>，接下来操作如图所示：<img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/morden_opengl_2.png" alt="项目创建前的设置"></li>
<li>在项目源文件夹下添加<code>main.cpp</code>，然后编译（或者运行）一下工程。<code>main.cpp</code>源码如下：<code>#include &lt;iostream&gt; int main(){ std::cout &lt;&lt; &quot;Hello World!&quot; &lt;&lt; std::endl; return 0; }</code></li>
<li>将上面下载好的三个文件解压。然后在项目文件夹（<code>OpenGLProject\OpenGLProject</code>）下新建两个文件夹分别取名为<code>include</code>和<code>lib</code>。如图：<img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/morden_opengl_3.png" alt="新建文件夹"></li>
<li>拷贝<code>GLEW</code>库文件到项目中。将解压的<code>glew-1.13.0</code>文件夹下的<code>include</code>文件中的<code>GL</code>文件拷贝到新建的<code>include</code>文件夹下。将<code>glew-1.13.0\lib\Release\Win32</code>文件夹下的<code>glew32.lib</code>和<code>glew32s.lib</code>文件拷贝到新建的<code>lib</code>文件夹下。将<code>glew-1.13.0\bin\Release\Win32</code>文件夹下的<code>glew32.dll</code>拷贝到最外层的<code>Debug</code>（<code>OpenGLProject\Debug</code>）文件夹下。</li>
<li>拷贝<code>GLM</code>库文件到项目中。将解压的<code>glm</code>文件夹下的<code>glm</code>文件夹整体拷贝到新建的<code>include</code>文件夹下。</li>
<li>拷贝<code>SDL</code>库文件到项目中。将解压的<code>SDL2-2.0.4</code>文件夹下的<code>include</code>文件夹整体拷贝到新建的<code>include</code>文件夹下,并重新命名为<code>SDL2</code>。将<code>SDL2-2.0.4\lib\x86</code>文件夹下的<code>SDL2.lib</code>、<code>SDL2main.lib</code>和<code>SDL2test.lib</code>都拷贝到新建的<code>lib</code>文件夹下，同时将<code>SDL2.dll</code>文件拷贝到最外层的<code>Debug</code>（<code>OpenGLProject\Debug</code>）文件夹下。</li>
<li>设置<code>include</code>路径。在VS的<code>解决方案资源管理器</code>中选中<code>OpenGLProject</code>项目，然后右键-&gt;属性。其他设置如图：<img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/morden_opengl_4.png" alt="设置include路径"></li>
<li>设置<code>lib</code>路径。设置步骤如图所示：<img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/morden_opengl_5.png" alt="设置lib路径"></li>
<li>设置附加依赖项。具体设置如图：<img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/morden_opengl_6.png" alt="设置附加依赖项"></li>
</ol>
<p>至此，OpenGL的开发环境已经搭建完成。下一篇文章讲解如何创建一个OpenGL的窗口。</p>
<blockquote>
<p>以上文章内容整理自YouTube视频教程<a href="https://www.youtube.com/playlist?list=PLEETnX-uPtBXT9T-hD0Bj31DSnwio-ywh" target="_blank" rel="noopener">Intro To Modern OpenGL Tutorial</a>。想要翻墙看原视频教程的请自备防和谐软件。</p>
</blockquote>
<hr>
<p><strong>同系列文章</strong></p>
<p><a href="http://davidsheh.github.io/2016/05/01/「Modern OpenGL系列（一）」十步搞定OpenGL开发环境/">「Modern OpenGL系列（一）」十步搞定OpenGL开发环境</a></p>
<p><a href="http://davidsheh.github.io/2016/05/02/「Modern OpenGL系列（二）」创建OpenGL窗口/">「Modern OpenGL系列（二）」创建OpenGL窗口</a></p>
<p><a href="http://davidsheh.github.io/2016/05/08/「Modern OpenGL系列（三）」用OpenGL绘制一个三角形/">「Modern OpenGL系列（三）」用OpenGL绘制一个三角形</a></p>
<p><a href="http://davidsheh.github.io/2016/05/08/「Modern OpenGL系列（四）」在OpenGL中使用Shader/">「Modern OpenGL系列（四）」在OpenGL中使用Shader</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OpenGL官网：&lt;a href=&quot;https://www.opengl.org。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.opengl.org。&lt;/a&gt;&lt;br&gt;开发常用的SDK库：&lt;a href=&quot;https://www.o
    
    </summary>
    
      <category term="技术笔记" scheme="http://davidsheh.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="OpenGL" scheme="http://davidsheh.github.io/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>「Unity游戏开发」向量在游戏开发中的应用（三）</title>
    <link href="http://davidsheh.github.io/2016/04/07/%E3%80%8CUnity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E3%80%8D%E5%90%91%E9%87%8F%E5%9C%A8%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://davidsheh.github.io/2016/04/07/「Unity游戏开发」向量在游戏开发中的应用（三）/</id>
    <published>2016-04-07T10:33:14.000Z</published>
    <updated>2019-01-29T11:10:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="http://davidsheh.github.io/2016/03/24/「Unity游戏开发」向量在游戏开发中的应用（二）/">上一篇博客</a>中讲了利用向量点乘在游戏开发中应用的几种情景。本篇博客将用一个简单的小例子来讲解在实际的游戏开发中如何利用向量的叉乘来解决问题。</p>
<h4 id="向量叉乘的几何意义"><a href="#向量叉乘的几何意义" class="headerlink" title="向量叉乘的几何意义"></a>向量叉乘的几何意义</h4><ol>
<li>叉积的长度 |a×b| 可以解释成以a和b为邻边的平行四边形的面积。</li>
<li>混合积 [a b c] = (a×b)·c可以得到以a，b，c为棱的平行六面体的体积。</li>
</ol>
<blockquote>
<p>关于向量叉乘的其他定义、规律以及应用有兴趣的朋友可以参考<a href="http://baike.baidu.com/link?url=UkiWhRdXPAFCrVRaQ29miie6aZcn9WLwpRYSsIHTAZhAL07fTdaymIr1XXQB5nxDaGB8ks_fkHR6sZQcKzaWGa" target="_blank" rel="noopener">百度百科</a>，这里就不再啰嗦了。本篇博客不想在叉乘其他地方纠结太多，只说一下如何用叉乘判断方向。</p>
</blockquote>
<h4 id="如何用向量叉乘判断方向"><a href="#如何用向量叉乘判断方向" class="headerlink" title="如何用向量叉乘判断方向"></a>如何用向量叉乘判断方向</h4><p>在网上有很多人将向量的应用总结为一句话：点乘判断角度，叉乘判断方向。关于点乘在<a href="http://blog.csdn.net/wenxin2011/article/details/50972976" target="_blank" rel="noopener">上一篇文章</a>中已经说完了，所以这里就说说如何用向量叉乘判断方向。<br>我们都知道在一个平面内的两个非平行向量叉乘的结果是这个平面的法向量，这个法向量是有方向的，而这个方向可以用“右手定则”来判断。具体的判断方法是：<br>若坐标系是满足右手定则的，当右手的四指从向量<strong>a</strong>以不超过180度的转角转向向量<strong>b</strong>时，竖起的大拇指指向是向量<strong>n</strong>的方向。如下图：<br><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/vector_cross.png" alt="向量叉乘"></p>
<blockquote>
<p>在右手坐标系中，当向量<strong>a</strong>和<strong>b</strong>作叉乘运算时， 利用“右手定则”可以知道：当法向量<strong>n</strong>跟某一坐标轴同向时，四指方向为逆时针方向；当法向量<strong>n</strong>跟该坐标轴反向时，四指方向为顺时针方向。同时“右手定则”要求转角不超过180度的方向，所以用叉乘判断的转向一定是最优转向（所要转动的角度最小，转动的代价也就最小）。在游戏中可利用这点来判断一个角色是顺时针还是逆时针才能更快速的转向一个敌人。</p>
<p><strong>注意：Unity3D是左手坐标系，所以四指方向跟右手坐标系正好相反。</strong></p>
</blockquote>
<h4 id="向量叉乘案例"><a href="#向量叉乘案例" class="headerlink" title="向量叉乘案例"></a>向量叉乘案例</h4><p>接下来的案例将展示如何用向量叉乘判断一个方向盘的转向。老规矩，先上个案例的效果图：<br><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/wheel_rotate.gif" alt="案例效果图"></p>
<p>案例源码：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> UnityEngine;</div><div class="line"><span class="keyword">using</span> System.Collections;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">VectorCrossDemo</span> : <span class="title">MonoBehaviour</span> </div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> GameObject wheelObj;</div><div class="line">    <span class="keyword">private</span> Vector3 wheelPos = Vector3.zero; </div><div class="line">    <span class="keyword">private</span> Vector3 oldVec = Vector3.zero;</div><div class="line">    <span class="keyword">private</span> Vector3 currVec = Vector3.zero;</div><div class="line"></div><div class="line">	<span class="comment">// Use this for initialization</span></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Start</span> (<span class="params"></span>) </span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        wheelObj = GameObject.Find(<span class="string">"Wheel"</span>);</div><div class="line">        <span class="keyword">if</span>(<span class="literal">null</span> != wheelObj)</div><div class="line">        &#123;</div><div class="line">            wheelPos = wheelObj.transform.position;</div><div class="line">        &#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">// Update is called once per frame</span></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Update</span> (<span class="params"></span>) </span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span> (Input.GetMouseButton(<span class="number">0</span>))</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> ray = Camera.main.ScreenPointToRay(Input.mousePosition);</div><div class="line">            RaycastHit hit;</div><div class="line">            <span class="keyword">if</span> (Physics.Raycast(ray, <span class="keyword">out</span> hit)) </div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(hit.transform.name.Equals(<span class="string">"Wheel"</span>))</div><div class="line">                &#123;</div><div class="line">                    RotateWheel(hit.point);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RotateWheel</span> (<span class="params">Vector3 pos</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        currVec = pos - wheelPos;<span class="comment">//计算方向盘中心点到触控点的向量			</span></div><div class="line"></div><div class="line">        Vector3 normalVec = Vector3.Cross(currVec, oldVec);<span class="comment">//计算法向量</span></div><div class="line">        <span class="keyword">float</span> vecAngle = Vector2.Angle(currVec, oldVec);<span class="comment">//计算两个向量的夹角		</span></div><div class="line"></div><div class="line">        <span class="comment">// 使用“右手定则”可知，当大拇指方向指向我们，四指方向为逆时针方向；</span></div><div class="line">        <span class="comment">// 当大拇指远离我们，四指方向为顺时针方向。</span></div><div class="line">        <span class="comment">// 这里叉乘后的法向量平行于z轴,所以用法向量的z分量的正负判断法向量方向</span></div><div class="line">        <span class="keyword">if</span> (normalVec.z &gt; <span class="number">0</span>)<span class="comment">// 和z轴同向，则顺时针转</span></div><div class="line">        &#123;</div><div class="line">            wheelObj.transform.Rotate(Vector3.forward, -vecAngle);<span class="comment">// 顺时针转</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (normalVec.z &lt; <span class="number">0</span>)<span class="comment">//和z轴反向，则逆时针转</span></div><div class="line">        &#123;</div><div class="line">            wheelObj.transform.Rotate(Vector3.forward, vecAngle);<span class="comment">// 逆时针转</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        oldVec = currVec;<span class="comment">//赋值</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>本Demo使用的的开发工具是Unity5.0.1f1和VS2013，建议下载源码后用Unity5.0.1f1或者更高的版本打开。<a href="http://download.csdn.net/detail/wenxin2011/9485516" target="_blank" rel="noopener">源码下载</a></p>
</blockquote>
<hr>
<p><strong>同系列文章</strong></p>
<p><a href="http://davidsheh.github.io/2016/03/05/「Unity游戏开发」向量在游戏开发中的应用（一）/">「Unity游戏开发」向量在游戏开发中的应用（一）</a></p>
<p><a href="http://davidsheh.github.io/2016/03/24/「Unity游戏开发」向量在游戏开发中的应用（二）/">「Unity游戏开发」向量在游戏开发中的应用（二）</a></p>
<p><a href="http://davidsheh.github.io/2016/04/07/「Unity游戏开发」向量在游戏开发中的应用（三）/">「Unity游戏开发」向量在游戏开发中的应用（三）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;http://davidsheh.github.io/2016/03/24/「Unity游戏开发」向量在游戏开发中的应用（二）/&quot;&gt;上一篇博客&lt;/a&gt;中讲了利用向量点乘在游戏开发中应用的几种情景。本篇博客将用一个简单的小例子来讲解在实际的游戏开发中如何利
    
    </summary>
    
      <category term="技术笔记" scheme="http://davidsheh.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Unity3D" scheme="http://davidsheh.github.io/tags/Unity3D/"/>
    
      <category term="游戏开发" scheme="http://davidsheh.github.io/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="向量" scheme="http://davidsheh.github.io/tags/%E5%90%91%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>「Unity游戏开发」向量在游戏开发中的应用（二）</title>
    <link href="http://davidsheh.github.io/2016/03/24/%E3%80%8CUnity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E3%80%8D%E5%90%91%E9%87%8F%E5%9C%A8%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://davidsheh.github.io/2016/03/24/「Unity游戏开发」向量在游戏开发中的应用（二）/</id>
    <published>2016-03-24T08:45:23.000Z</published>
    <updated>2019-01-29T11:10:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="http://davidsheh.github.io/2016/03/05/「Unity游戏开发」向量在游戏开发中的应用（一）/">上一篇博客</a>中讲了利用向量方向的性质来解决问题。这篇博客将继续用一个简单的小例子来讲解如何将向量的点乘性质应用到实际的游戏开发中。</p>
<h2 id="向量点乘的几何定义"><a href="#向量点乘的几何定义" class="headerlink" title="向量点乘的几何定义"></a><strong>向量点乘的几何定义</strong></h2><p>设二维空间内有两个向量<strong>U</strong>和<strong>V</strong>，它们的夹角为θ（[0, π]），则内积定义为以下实数：<br>向量点乘的公式：<strong>U·V</strong> = <strong>|U||V|</strong>cosθ<br>根据该公式可以退到下面五条结论：</p>
<pre><code>1. **U·V** &gt; 0，表示向量**U**和**V**之间的夹角小于90度（锐角）
2. **U·V** &lt; 0，表示向量**U**和**V**之间的夹角大于90度（钝角）
3. **U·V** = 0，表示向量**U**和**V**之间的夹角为90度（相互垂直）
4. **U·V** = 1，表示向量**U**和**V**的方向相同
5. **U·V** = -1，表示向量**U**和**V**的方向相反
</code></pre><blockquote>
<p>关于向量点乘的其他定义、规律以及应用有兴趣的朋友可以参考<a href="http://baike.baidu.com/link?url=Xtq-zmrssRvWDAHZuG1zlhzSoHv2ehrWploI9LgAMDkYVCSN4yTed4C_ExPKES9XUDdPc7GlRoUz9mpuSXkw7K" target="_blank" rel="noopener">百度百科</a>，这里就不再啰嗦了。本篇博客主要讲如何将以上五条结论应用到游戏开发中。</p>
</blockquote>
<h2 id="向量点乘的应用情景"><a href="#向量点乘的应用情景" class="headerlink" title="向量点乘的应用情景"></a><strong>向量点乘的应用情景</strong></h2><ol>
<li>根据向量点乘公式求两个向量的夹角大小。</li>
<li>根据结论1和2判断两个向量的夹角，可以用来限定两个向量的夹角。</li>
<li>根据结论3判断两个向量是否垂直。</li>
<li>根据结论4和5可以判断方位。可判断一个物体位于另一个物体的前面还是后面（或者左边还是右边）。</li>
</ol>
<p>向量点乘如何判断一个物体在另一个物体的的前面还是后面呢？在《3D数学基础：图形与游戏开发》这本书中对这点做了很好的解释。下面贴出书中原话：<br><img src="https://raw.githubusercontent.com/DavidSheh/MarkdownPictures/master/pictures/vector_dot.png" alt="向量点乘"></p>
<p>既然能判断前面还是后面，当然也能判断左边还是右边了，只是选择的方向向量不同而已，这里留给读者自己思考。</p>
<hr>
<p><strong>同系列文章</strong></p>
<p><a href="http://davidsheh.github.io/2016/03/05/「Unity游戏开发」向量在游戏开发中的应用（一）/">「Unity游戏开发」向量在游戏开发中的应用（一）</a></p>
<p><a href="http://davidsheh.github.io/2016/03/24/「Unity游戏开发」向量在游戏开发中的应用（二）/">「Unity游戏开发」向量在游戏开发中的应用（二）</a></p>
<p><a href="http://davidsheh.github.io/2016/04/07/「Unity游戏开发」向量在游戏开发中的应用（三）/">「Unity游戏开发」向量在游戏开发中的应用（三）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;http://davidsheh.github.io/2016/03/05/「Unity游戏开发」向量在游戏开发中的应用（一）/&quot;&gt;上一篇博客&lt;/a&gt;中讲了利用向量方向的性质来解决问题。这篇博客将继续用一个简单的小例子来讲解如何将向量的点乘性质应用到实际
    
    </summary>
    
      <category term="技术笔记" scheme="http://davidsheh.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Unity3D" scheme="http://davidsheh.github.io/tags/Unity3D/"/>
    
      <category term="游戏开发" scheme="http://davidsheh.github.io/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="向量" scheme="http://davidsheh.github.io/tags/%E5%90%91%E9%87%8F/"/>
    
  </entry>
  
</feed>
